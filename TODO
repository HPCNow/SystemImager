#
# $Id$
#  vi:set filetype=conf tw=72:
#

4) need to remove discover and discover-data bits, and all references to
   them.  this functionality now provided by udev + hotplug

   (postponed -- don't think having discover there hurts anything, and
    it may help -BEF-)

5) consider using modprobe instead of insmod for re-loading modules

    (non-critical, just something to contemplate -BEF-)

6) Add a kernel-devel tree package, like those that ship with RedHat, 
   Ubuntu, etc. There's just enough data to build boot-kernel modules 
   against, but nothing else. 
   
   Ie: kernel-headers. (Jeremy Siadal suggestion)

7) A boel_binaries_template, just like the initrd, so additional
   drivers can be dropped into /lib/modules/<kernel_ver>/. 
   (Jeremy Siadal suggestion)

8) Standard kernel to have only modular drivers for:
   - all network devices
   - all storage devices
   (Jeremy Siadal suggestion)

9) Include mkrecoveryISO in the standard release.

10) si_mkbootmedia.  Status?

11) si_mkautoinstallcd -- deal with fs sizing more gracefully

13) improved tftpbooting architecture

    Location:
        ln -s /usr/share/systemimager/boot /tftpboot

    In that location:
        ia64/standard
            /elilo.efi (provided as part of ia64 standard boot package)
        i386/standard
            /pxelinux.bin (provided as part of i386 standard boot package)
            /pxelinux.cfg (provided as part of i386 standard boot package)
        x86_64/standard
              /pxelinux.bin (provided as part of x86_64 standard boot package)
              /pxelinux.cfg (provided as part of x86_64 standard boot package)
        etc...

    si_mkbootserver
        - for now, just hardcode a softlink from /tftpboot ->
          /usr/share/systemimager/boot
        - later, re-write in perl and try to improve interaction

    si_mkclientnetboot
        For a host with a name of "my-host" with a mac address that
        derives to a boot file with a name of "92890905" produce boot
        file that includes:

        - an entry for every one of: ls /tftpboot/i386/*/kernel | perl
          -pi -e 's#/tftpboot/##' 

        - a reference to a messages file named
          "pxelinux.cfg/92890905.my-host" that contains a boot menu with
          menu items for each of the possible kernels from above.

        - Paul G.'s sample menu enabled pxe-boot file:

DISPLAY pxelinux.cfg/message.txt
PROMPT 1
TIMEOUT 5000
DEFAULT local
#TIMEOUT 10 
#DEFAULT 4

LABEL 1
  LOCALBOOT 0 

LABEL local
  LOCALBOOT 0 

LABEL 2 
  KERNEL kernel
  APPEND vga=extended load_ramdisk=1 prompt_ramdisk=0 initrd=initrd.img root=/dev/ram rw ramdisk_blocksize=4096

LABEL install 
  KERNEL kernel
  APPEND vga=extended load_ramdisk=1 prompt_ramdisk=0 initrd=initrd.img root=/dev/ram rw ramdisk_blocksize=4096

LABEL 3
 kernel memdisk
 append initrd=dos.img

LABEL installwin
 kernel memdisk
 append initrd=dos.img

LABEL install-amd64
  KERNEL kernel.amd64
  APPEND vga=extended load_ramdisk=1 prompt_ramdisk=0 initrd=initrd.img.amd64 root=/dev/ram rw ramdisk_blocksize=4096
LABEL 4
  KERNEL kernel.amd64
  APPEND vga=extended load_ramdisk=1 prompt_ramdisk=0 initrd=initrd.img.amd64 root=/dev/ram rw ramdisk_blocksize=4096


            And include a message.txt that looks something like:


welcome to 
 #####   ######   ####   ######    ##    #####    ####   #    #
 #    #  #       #       #        #  #   #    #  #    #  #    #
 #    #  #####    ####   #####   #    #  #    #  #       ######
 #####   #            #  #       ######  #####   #       #    #
 #   #   #       #    #  #       #    #  #   #   #    #  #    #
 #    #  ######   ####   ######  #    #  #    #   ####   #    #
your choices:

1.) local - This is the default action, it boots the local hard drive
	           it will happen in 5 seconds
	           or hit enter and it will happen now

- Talk to Admin before using any of the rest of these - 
2.) install - reinstall linux, resizes Hard drive
	             resize may break windows

3.) installwin - reinstalls the windows partition
	                will erase C: drive

4.) install-amd64 - reinstall linux on amd64 machines


        - generates a boot file for each client that looks like below,
          and includes a nice net-boot message for the client's console
          that explains their net-boot kernel choices:

            DEFAULT standard

            #
            # Uncomment next line to send pxelinux boot prompt over
            # serial port 0.
            # NOTE: Be sure your serial port speed is appropriate
            # (57600, 9600, etc.)
            #
            #SERIAL 0 57600
            DISPLAY message.txt
            PROMPT 1
            TIMEOUT 50

            # Add the following to the append line above to use your
            # first serial port
            # (ttyS0) as a console in addition to your monitor (tty0).
            # NOTE: Be sure
            # your serial port speed is appropriate (57600, 9600, etc.)
            #
            #console=ttyS0,57600

            # Add the following to the append line above to increase the
            # size of your tmpfs
            # filesystem.  About 100MB larger than your image size
            # should suffice.
            #
            # Other tmpfs mount options are also supported.  See the FAQ
            # for details.
            #tmpfs_size=800M

            LABEL standard
            KERNEL i386/i386-dapper-server/kernel
            APPEND vga=extended
            initrd=i386/i386-dapper-server/initrd.img root=/dev/ram

            LABEL i386-dapper-server
            KERNEL i386/i386-dapper-server/kernel
            APPEND vga=extended
            initrd=i386/i386-dapper-server/initrd.img root=/dev/ram

18) Move all LVM info into the <lvm> section of autoinstallscript.conf.

    - No longer store any lvm info in the <disk> and/or <raid> sections
    - Collect PV info and store it in the <lvm_group> section
        <lvm>
          <lvm_group>
            <pv device="/dev/sda1" />
            <pv device="/dev/md0"  />
            <pv device="/dev/md1"  />
            <lv name="swap" size="524288K" />
            <etc...>
          </lvm_group>
        </lvm>

    - Need to modify:
        - Server.pm
        - Common.pm
        - autoinstallscript.template

19) Test --dry-run option.  Email with details:

    Subject: [Sisuite-users] si_updateclient: differences b/w with and without --dry-run



21) Scott Jackson:  ethernet re-ordering

    The most time consuming was not a SI problem per-se, but a problem
    in the recent Ubuntu packages where the system reorders the ethernet
    adapter names upon reboot. For instance on a node that has two
    ethernet adapters, on the install the ethernet adapters show up as
    eth0 and eth1, but after the reboot they are eth2 and eth3 with it
    being more or less random which one is the one attached to the
    network (the one with the lowest mac address). I tried several
    things but eventually had to copy in a modified
    /etc/network/interfaces in the post-install script which used an
    "external mapping function" to map the lowest mac address to the
    primary alias.  The resulting interfaces file is demonstrated below.

        root@node17:~# cat /etc/network/interfaces
        # The loopback interface
        # Interfaces that comes with Debian Potato does not like to see
        # "auto" option before "iface" for the first device specified.
        iface lo inet loopback
        auto lo

        auto eth0 eth1 eth2 eth3
        mapping eth0 eth1 eth2 eth3
                script /etc/network/set-first-primary.pl

        iface primary inet dhcp


    The content of the "external mapping function" is as follows:

        root@node17:/etc/network# cat set-first-primary.pl
        #!/usr/bin/perl -w
        use strict;

        my @macs =3D ();
        my %mac =3D ();

        open IFCONFIG, "/sbin/ifconfig -a | grep '^eth' |" or die "Unable to run
        ifconfig -a: $!\n";
        foreach my $line (<IFCONFIG>)
        {
            my ($nic, $link, $desc, $hwaddr, $mac) =3D split /\s+/, $line;
            $mac =3D lc $mac;
            push @macs, $mac;
            $mac{$nic} =3D $mac;
        }

        @macs =3D sort @macs;

        if ($mac{$ARGV[0]} eq $macs[0]) { print "primary\n"; exit 0; }
        else { exit 1; }


    Craziness!

    So, now we will begin writing support scripts around the systemimager
    framework to dynamically provision nodes.

    When I get really bold, I may try to create an image based on centos or
    some such OS so we can actually switch OSes:)

    Please let me know when there are deb packages for 3.7.3.

    THANK YOU VERY MUCH for all of your knowledgeable and willing help!

    Scott

    Scott Jackson
    Cluster Resources, Inc.

24) date > /tmp/start-time at start of install
    date > /tmp/end-time at end of install

    Then:
    echo Your install took started at `cat /tmp/start-time` 
    echo and completed at `cat /tmp/end-time`

25) test fat fs creation

27) Enable sshd in ramdisk such that you can ssh into the nodes from the image
    server in the event of imaging failure

28) si_monitortk improvements (thanks Bernard for the good suggestions):
    - support multiple virtual console instances at the same time
    - add a popup menu on the client entries to display detailed info
      and perform special actions (like open virtual console, check
      availability of the node, delete entry, etc)
    - left click on the header to sort clients
    - tabbed view for virtual console

31) Investigate libtorrent: http://libtorrent.rakshasa.no/ to see if it is a
    feasible replacement for the python bittorrent libraries

35) Implement si_getdebuginfo to generate a tar.gz containing all the system
    informations that could help to debug user problems (systemimager versions,
    partitioning schema, kernel, distribution used, etc). In this way a user
    that needs support can simply post the tarball to the list and we'll have
    immediately an overview of the system.
    
36) Implement a GUI to perform all the common systemimager operations

