#
# "SystemImager"
#
#  Copyright (C) 1999-2001 Brian Elliott Finley <brian.finley@baldguysoftware.com>
#  Copyright (C) 2002 Bald Guy Software <brian.finley@baldguysoftware.com>
#
#   $Id$
#

--------------------------------------------------------------------------------
Developer Guidelines
--------------------------------------------------------------------------------
o Current development branch is tagged "HEAD".  This is the default.  
  Most developers will use this.  To check out the development branch,
  see "CVS Checkout Steps for Developers for the Development Branch"
  below.
o The stable branch is only to be used for fixing bugs.  To check out
  the stable branch see "CVS Checkout Steps for Developers for the 
  Stable Branch (bug fixes only)" below.
o Only Brian Finley will modify CVS tags of any kind, such as for versioning 
  releases or creating development branches.
o Always get approval from Brian Finley prior to adding any new files or 
  directories to CVS.
o Try to mimick the style of the code that you are working in.  This will
  significantly improve your chances of it being accepted.
o Include a usage statement with every function/subroutine, no matter how
  simple and self-explanatory that function is.  Example:

    # Usage:
    # my $partition_tool = which_partition_tool();
    sub which_partition_tool {
        [... code here ...]
    }

o When you close a bug or feature request, add an appropriate line to the 
  CHANGE.LOG that includes the bug or feature number.  Be sure to include 
  your initials. -BEF-
o Documentation:  Developers may make changes to the documentation source, but
  must contact Denise Walters for approval prior to making any structural 
  changes.  Denise may be contacted at: <denise.walters@hp.com>
o Always give people credit in the CREDITS file.
o Have fun!


--------------------------------------------------------------------------------
CVS Reference Material
--------------------------------------------------------------------------------
o http://www.loria.fr/~molli/cvs/doc/cvs_toc.html
 or
o http://cvsbook.red-bean.com/cvsbook.html
 or
o http://www.cvshome.org/


--------------------------------------------------------------------------------
CVS Checkout Steps for Developers
(You should be able to just copy and paste commands 2-5)
--------------------------------------------------------------------------------
1) Set your username:
   MY_CVS_USERNAME=your_cvs_user_name

2) Tell cvs to operate over ssh:
   CVS_RSH=ssh

3) Choose your branch:
   BRANCH=HEAD                  (current development branch)
   BRANCH=unstable-2_1_x        (special: we will not normally have unstable)
   BRANCH=stable-2_0_x          (current stable branch -- bug fixes only)

4) Checkout the code:
   cvs -z3 -d:ext:$MY_CVS_USERNAME@cvs.systemimager.sourceforge.net:/cvsroot/systemimager co -r $BRANCH systemimager

5) Rename the checked out source tree:
   mv systemimager systemimager.$BRANCH


--------------------------------------------------------------------------------
Versioning
--------------------------------------------------------------------------------
o SystemImager uses kernel style versioning (X.Y.Z):
  o X = major architectural change
  o Y = feature release
    o an odd number indicates a development release (leading up to an even numbered stable release)
    o an even number indicates a stable release
  o Z = bug fix release (no new features)

o We make the unstable packages available as downloads, but with warnings, etc.

o We don't put the unstable systemimager packages into Debian unstable, at least not until
  the systemimager stable packages make it into Debian stable, but maybe not even then.

o Outside of the Debian contemplation above, if someone wants access to the development
  code, it must be downloaded via systemimager.org, and we do our best to resist having it 
  packaged in any kind of release (I know we can't really control this, but we often have influence)

o Announcements on the website are only updated for stable package releases, but
  We have an ongoing general statement about development releases available here: (pointer to sf download page)

o Examples from the current tree (as of 2001.12.14):
  o stable-2_0_x, getting bug fixes only
  o unstable-2_1_x, ia64 feature branch
    o soon to be stable and we can release it as 2.2.0 and leave stable-2_0_x behind
  o HEAD, will continue on as HEAD, releases will be called 2.3.0, 2.3.1, etc.
    o when it's ready, it will hatch into 2.4.0 and be branched as stable-2_4_x

  o So for now, we'll have three active branches, stable-2_0_x, unstable-2_1_x, and 
    HEAD, but in the future, we will only have a single active stable-?_?_x branch 
    and HEAD (no unstable-?_?_x branch will be necessary).


It is now law.

-Brian
