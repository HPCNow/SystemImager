diff -urN linux-clean/arch/ia64/kernel/efi.c acpi/arch/ia64/kernel/efi.c
--- linux-clean/arch/ia64/kernel/efi.c	Wed Sep  5 09:58:32 2001
+++ acpi/arch/ia64/kernel/efi.c	Wed Sep  5 10:28:36 2001
@@ -479,6 +479,45 @@
 	return 0;
 }
 
+int
+efi_page_is_ram (u64 phys_addr)
+{
+	void *efi_map_start, *efi_map_end, *p;
+	efi_memory_desc_t *md;
+	u64 efi_desc_size;
+
+	efi_map_start = __va(ia64_boot_param->efi_memmap);
+	efi_map_end   = efi_map_start + ia64_boot_param->efi_memmap_size;
+	efi_desc_size = ia64_boot_param->efi_memdesc_size;
+
+	for (p = efi_map_start; p < efi_map_end; p += efi_desc_size) {
+		md = p;
+
+		if ((md->phys_addr <= phys_addr) && (phys_addr <=
+		    (md->phys_addr + (md->num_pages << 12) - 1))) {
+
+			switch (md->type) {
+				case EFI_LOADER_CODE:
+				case EFI_LOADER_DATA:
+				case EFI_BOOT_SERVICES_CODE:
+				case EFI_BOOT_SERVICES_DATA:
+				case EFI_RUNTIME_SERVICES_CODE:
+				case EFI_RUNTIME_SERVICES_DATA:
+				case EFI_CONVENTIONAL_MEMORY:
+				case EFI_ACPI_RECLAIM_MEMORY:
+				case EFI_ACPI_MEMORY_NVS:
+					return 1;
+				case EFI_MEMORY_MAPPED_IO:
+				case EFI_MEMORY_MAPPED_IO_PORT_SPACE:
+					return 0;
+				default:
+					return -1;
+			}
+		}
+	}
+	return -1;
+}
+
 static void __exit
 efivars_exit(void)
 {
diff -urN linux-clean/drivers/acpi/acpiconf.c acpi/drivers/acpi/acpiconf.c
--- linux-clean/drivers/acpi/acpiconf.c	Wed Sep  5 09:58:32 2001
+++ acpi/drivers/acpi/acpiconf.c	Wed Sep  5 10:28:36 2001
@@ -46,7 +46,7 @@
 	}
 	dprintk(("Acpi cfg:initializ_subsysteme pass\n"));
 
-	status = acpi_load_tables ((u64)rsdp);
+	status = acpi_load_tables ((u64)virt_to_phys(rsdp));
 	if (ACPI_FAILURE(status)) {
 		printk ("Acpi cfg:load firmware tables error=0x%x\n", status);
 		acpi_terminate();
diff -urN linux-clean/drivers/acpi/driver.c acpi/drivers/acpi/driver.c
--- linux-clean/drivers/acpi/driver.c	Wed Sep  5 09:58:32 2001
+++ acpi/drivers/acpi/driver.c	Wed Sep  5 10:28:36 2001
@@ -39,6 +39,7 @@
 #include <linux/pm.h>
 #include <linux/acpi.h>
 #include <asm/uaccess.h>
+#include <asm/io.h>
 #include "acpi.h"
 #include "driver.h"
 
@@ -87,7 +88,10 @@
 		return -ENODEV;
 	}
 #else
-	rsdp_phys = (ACPI_PHYSICAL_ADDRESS) efi.acpi;
+	if (efi.acpi20)
+		rsdp_phys = virt_to_phys(efi.acpi20);
+	else
+		rsdp_phys = virt_to_phys(efi.acpi);
 #endif
 
 	/* from this point on, on error we must call acpi_terminate() */
diff -urN linux-clean/drivers/acpi/os.c acpi/drivers/acpi/os.c
--- linux-clean/drivers/acpi/os.c	Wed Sep  5 09:58:32 2001
+++ acpi/drivers/acpi/os.c	Wed Sep  5 10:28:36 2001
@@ -175,9 +175,32 @@
 	kfree(ptr);
 }
 
+#ifdef CONFIG_ACPI_KERNEL_CONFIG
+#include <asm/efi.h>
+#define ACPI_USE_EFI
+#endif
+
 ACPI_STATUS
 acpi_os_map_memory(ACPI_PHYSICAL_ADDRESS phys, u32 size, void **virt)
 {
+#ifdef ACPI_USE_EFI
+	int ram_page;
+
+	ram_page = efi_page_is_ram((unsigned long) phys);
+
+	if (ram_page == 1) {
+		*virt = phys_to_virt((unsigned long) phys);
+		/* printk("acpi_os_map_memory(0x%lx) = 0x%lx\n",phys, *virt); */
+		return AE_OK;
+	} else if (ram_page == 0) {
+		*virt = ioremap((unsigned long) phys, size);
+		/* printk("acpi_os_map_memory(0x%lx) = 0x%lx\n",phys, *virt); */
+		return AE_OK;
+	} else {
+		/* printk("acpi_os_map_memory(0x%lx) = ????\n",phys); */
+		return AE_ERROR;
+	}
+#else
 	if (phys > ULONG_MAX) {
 		printk(KERN_ERR "ACPI: Cannot map memory that high\n");
 		return AE_ERROR;
@@ -193,6 +216,7 @@
 		return AE_ERROR;
 
 	return AE_OK;
+#endif
 }
 
 void
@@ -399,37 +423,43 @@
 UINT8
 acpi_os_mem_in8 (ACPI_PHYSICAL_ADDRESS phys_addr)
 {
-	return (*(u8*) phys_addr);
+	u8* virt_addr = ioremap(phys_addr,0);
+	return (*(u8*) virt_addr);
 }
 
 UINT16
 acpi_os_mem_in16 (ACPI_PHYSICAL_ADDRESS phys_addr)
 {
-	return (*(u16*) phys_addr);
+	u16* virt_addr = ioremap(phys_addr,0);
+	return (*(u16*) virt_addr);
 }
 
 UINT32
 acpi_os_mem_in32 (ACPI_PHYSICAL_ADDRESS phys_addr)
 {
-	return (*(u32*) phys_addr);
+	u32* virt_addr = ioremap(phys_addr,0);
+	return (*(u32*) virt_addr);
 }
 
 void
 acpi_os_mem_out8 (ACPI_PHYSICAL_ADDRESS phys_addr, UINT8 value)
 {
-	*(u8*) phys_to_virt(phys_addr) = value;
+	u8* virt_addr = ioremap(phys_addr,0);
+	*(u8*) virt_addr = value;
 }
 
 void
 acpi_os_mem_out16 (ACPI_PHYSICAL_ADDRESS phys_addr, UINT16 value)
 {
-	*(u16*) phys_to_virt(phys_addr) = value;
+	u16* virt_addr = ioremap(phys_addr,0);
+	*(u16*) virt_addr = value;
 }
 
 void
 acpi_os_mem_out32 (ACPI_PHYSICAL_ADDRESS phys_addr, UINT32 value)
 {
-	*(u32*) phys_to_virt(phys_addr) = value;
+	u32* virt_addr = ioremap(phys_addr,0);
+	*(u32*) virt_addr = value;
 }
 
 ACPI_STATUS
diff -urN linux-clean/include/asm-ia64/efi.h acpi/include/asm-ia64/efi.h
--- linux-clean/include/asm-ia64/efi.h	Tue Jul 31 11:30:09 2001
+++ acpi/include/asm-ia64/efi.h	Wed Sep  5 10:28:36 2001
@@ -239,6 +239,7 @@
 extern void efi_gettimeofday (struct timeval *tv);
 extern void efi_enter_virtual_mode (void);	/* switch EFI to virtual mode, if possible */
 extern u64  efi_get_iobase (void);
+extern int  efi_page_is_ram (u64 phys_addr);
 
 /*
  * Variable Attributes
