#
#	"SystemImager"  
#
#	Copyright (C) 1999-2005 Brian Elliott Finley
#	Copyright (C) 2002-2004 dann frazier <dannf@hp.com>
#
#	Others who have contributed to this code:
#		Sean Dague <sean@dague.net>
#
#   $Id$
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#   2004.09.19  Brian Elliott Finley
#   - rename initrd_install -> install_initrd
#   - add PHONY += install_initrd
#   2004.10.18  Brian Elliott Finley
#   - add "build_dir_clean" target
#   - add "initrd.img" target
#   - add "initrd" target
#   2004.10.18  David Smith
#	- Explicitly include more w/mklibs -L.
#   2004.10.19  Brian Elliott Finley
#	- switch to busybox modutils for x86
#   2005.02.14  Brian Elliott Finley
#	- add install_initrd_template
#	2005.07.12 Brian Elliott Finley
#	- x86_64 mklibs related mods; patch from Erich Focht
#	2005.07.19 Brian Elliott Finley
#	- Erich Focht patch
#	- the attached patch creates /dev/null and /dev/console in the intrd. These are
#		needed on ia64 with 2.6.10 kernels, as something (init?) accesses them before
#		udev is properly up and running. If not applied, the kernel will die with the
#		message:
#			Warning: unable to open initial console.
#


INITRD_PATCH_DIR = $(INITRD_DIR)/patches
INITRD_SRC_DIR = $(INITRD_DIR)/src

## Should initrd.img be gzipped?
INITRD_COMPRESS = yes
ifdef IS_PPC64
INITRD_COMPRESS = no
endif
ifeq ($(ARCH),alpha)
INITRD_COMPRESS = no
endif

STAMP_DIR = $(INITRD_SRC_DIR)

INITRD_BUILD_DIR = $(INITRD_DIR)/build_dir

SKEL_FILES = $(shell find $(INITRD_DIR)/skel -not -regex '.*/CVS.*' -and \
                                 -not -regex '.*/CVS' -and \
                                 -not -regex '.*/.svn.*' -and \
                                 -not -regex '.*/.svn')

MKCRAMFS = $(shell which mkcramfs || which mkfs.cramfs || \
             echo MKCRAMFS_WAS_NOT_FOUND_IN_YOUR_PATH)

# Number of inodes in the build directory and number of 
# inodes needed on the initial RAM disk -BEF-

### BEGIN module utility decisions ###
# Need newer module-init-tools for 2.6.X kernels.
MODULE_UTILS=module-init-tools
ifeq ($(ARCH),ppc64)
  MODULE_UTILS=busybox
endif
ifeq ($(ARCH),ppc64-iSeries)
  MODULE_UTILS=busybox
endif
### END module utility decisions ###

### BEGIN uclibc decisions ###
# Only use UCLIBC for i386 -BEF-
ifeq ($(ARCH),i386)
	UCLIBC_ARCH_NAME := i386
endif


ifdef UCLIBC_ARCH_NAME
	UCLIBC_PATH = $(UCLIBC_DEV)/usr/bin
	INITRD_BUILD_PATH = $(UCLIBC_PATH):$(PATH)
	UCLIBC_TARGET := $(INITRD_SRC_DIR)/uclibc_runtime-stamp
else
	INITRD_BUILD_PATH = $(PATH)
endif
### END uclibc decisions ###

PATH := $(INITRD_BUILD_PATH)

include $(INITRD_DIR)/make.d/*.rul

build_dir:	$(INITRD_DIR)/build_dir-stamp

$(INITRD_DIR)/build_dir-stamp:	$(SKEL_FILES) \
								$(BUSYBOX_BINARY) \
								$(DEVFSD_BINARY) \
								$(DHCLIENT_BINARY) \
								$(RSYNC_BINARY) \
								$(UCLIBC_TARGET) \
								$(INSMOD_BINARY) \
								$(MODPROBE_BINARY) \
								$(BITTORRENT_BINARY) \
								$(CX_FREEZE_BINARY) \
								$(UDPCAST_BINARY)
	# Create directory structure.
	rm -fr $(INITRD_BUILD_DIR)
	mkdir $(INITRD_BUILD_DIR)
	cd $(INITRD_BUILD_DIR) && \
	  mkdir -m 755 bin dev etc lib proc root sbin usr var
	test ! -d /lib64 || mkdir -m 755 -p $(INITRD_BUILD_DIR)/lib64
	cd $(INITRD_BUILD_DIR)/dev && \
	  mknod -m 660 console c 5 1 && \
	  mknod -m 660 null c 1 3
	cd $(INITRD_BUILD_DIR) && \
	  mkdir -m 755 usr/bin usr/sbin etc/init.d var/run
	cd $(INITRD_BUILD_DIR) && mkdir -m 1777 tmp

	# Copy over busybox binary and all it's hard links. -BEF-
	cp -a $(INITRD_SRC_DIR)/$(BUSYBOX_DIR)/_install/* $(INITRD_BUILD_DIR)/

	# Copy over other binaries.
	cp -a $(DEVFSD_BINARY)      $(INITRD_BUILD_DIR)/sbin
	cp -a $(DHCLIENT_BINARY)    $(INITRD_BUILD_DIR)/sbin
	cp -a $(RSYNC_BINARY)       $(INITRD_BUILD_DIR)/bin
	cp -a $(UDPCAST_BINARY)     $(INITRD_BUILD_DIR)/bin

	# Bittorrent installation.
	$(CX_FREEZE_BINARY) --install-dir=$(INITRD_BUILD_DIR)/lib/bittorrent --exclude-modules=gobject,pango,gtk $(INITRD_SRC_DIR)/$(BITTORRENT_DIR)/torrentinfo-console.py
	$(CX_FREEZE_BINARY) --install-dir=$(INITRD_BUILD_DIR)/lib/bittorrent --exclude-modules=gobject,pango,gtk $(INITRD_SRC_DIR)/$(BITTORRENT_DIR)/bittorrent-console.py

	# Explicit copy shared libraries needed by bittorrent binaries.
	( for l in $$(ldd $(INITRD_BUILD_DIR)/lib/bittorrent/* 2>/dev/null | sed -ne 's/.*=> \(.*\) (.*)/\1/p' | sort -u); do cp -pf $$l $(INITRD_BUILD_DIR)/lib; done )
	# Make sure the dynamic linker is present.
	(for l in $$(readelf --program-headers $(INITRD_BUILD_DIR)/lib/bittorrent/* | sed -ne 's/^.*\[Requesting program interpreter: \(.*\)\]$$/\1/p' | sort -u); do cp -pf $$l $(INITRD_BUILD_DIR)/lib; done )

ifdef	INSMOD_BINARY
	( [ ! -e $(INITRD_BUILD_DIR)/sbin/insmod ] && \
          cp -a $(INSMOD_BINARY) $(INITRD_BUILD_DIR)/sbin/insmod ) || \
        ( echo "$(INITRD_BUILD_DIR)/sbin/$(INSMOD_BINARY) already exists." &&\
          echo "Is insmod maybe already provided by busybox?" && exit 1 )
endif
ifdef	MODPROBE_BINARY
	( [ ! -e $(INITRD_BUILD_DIR)/sbin/modprobe ] && \
          cp -a $(MODPROBE_BINARY) $(INITRD_BUILD_DIR)/sbin ) || \
        ( echo "$(INITRD_BUILD_DIR)/sbin/$(MODPROBE_BINARY) already exists." &&\
          echo "Is modprobe maybe already provided by busybox?" && exit 1 )
endif

ifdef UCLIBC_TARGET
	cp -a $(UCLIBC_RUNTIME)/usr $(INITRD_BUILD_DIR)
else
	# If we're not using uclibc, then copy over the 
	# standard libs instead. -BEF-
	cp -a /lib/ld*   $(INITRD_BUILD_DIR)/lib
	test ! -d /lib64 || cp -a /lib64/ld* $(INITRD_BUILD_DIR)/lib64
	# Explicitly include more w/mklibs -L.  -dawild-
ifeq ($(ARCH),x86_64)
	( cd $(INITRD_BUILD_DIR) && \
		$(PYTHON) $(INITRD_DIR)/mklibs -L /lib64:/usr/lib64:/lib:/usr/lib -v -d lib64 ./*bin/* )
	# copy libnss files as they are not automatically included
	cp -a /lib64/libnss_dns* $(INITRD_BUILD_DIR)/lib64
else
	( cd $(INITRD_BUILD_DIR) && \
		$(PYTHON) $(INITRD_DIR)/mklibs -L /lib:/usr/lib:/lib64:/usr/lib64 -v -d lib ./*bin/* )
	# copy libnss files as they are not automatically included
	cp -a /lib/libnss_dns* $(INITRD_BUILD_DIR)/lib
endif
endif

	# Strip 'em. -BEF-
	strip $(INITRD_BUILD_DIR)/bin/*
	strip $(INITRD_BUILD_DIR)/sbin/*
	strip $(INITRD_BUILD_DIR)/usr/bin/*
	strip $(INITRD_BUILD_DIR)/usr/sbin/*

	# Create the bittorrent links.
	cd $(INITRD_BUILD_DIR)/bin && ln -s ../lib/bittorrent/torrentinfo-console
	cd $(INITRD_BUILD_DIR)/bin && ln -s ../lib/bittorrent/bittorrent-console

	# Copy over text files from the skel directory.
	cp -a $(INITRD_DIR)/skel/* $(INITRD_BUILD_DIR)

	# The following rule gets rid of virtual consoles on 
	# platforms that don't have them.
ifeq ($(ARCH),ppc64-iSeries)
	cat $(INITRD_DIR)/skel/etc/inittab | grep -v ^vc\/ > \
		$(INITRD_BUILD_DIR)/etc/inittab
endif

	$(SI_INSTALL) -m 755 $(INITRD_DIR)/skel/etc/init.d/rcS \
	  $(INITRD_BUILD_DIR)/etc/init.d/rcS

	$(SI_INSTALL) -m 755 $(INITRD_DIR)/skel/etc/init.d/functions \
	  $(INITRD_BUILD_DIR)/etc/init.d/functions

	# Copy over modules required prior to retrieving the autoinstall
	# binaries tarball. -BEF-
	cp -a $(INITRD_DIR)/my_modules $(INITRD_BUILD_DIR)

	# Clear out CVS cruft.
	find $(INITRD_BUILD_DIR) -depth -type d -name CVS | xargs rm -rf
	find $(INITRD_BUILD_DIR) -depth -type d -name .svn | xargs rm -rf
	mkdir $(INITRD_BUILD_DIR)/new_root

	touch $(INITRD_DIR)/build_dir-stamp

PHONY += initrd.img
initrd.img:	$(INITRD_DIR)/initrd.img

ifeq ($(INITRD_COMPRESS),yes)
$(INITRD_DIR)/initrd.img:	$(INITRD_DIR)/initrd
	gzip -9 < $(INITRD_DIR)/initrd > $(INITRD_DIR)/initrd.img
else
$(INITRD_DIR)/initrd.img:       $(INITRD_DIR)/initrd
	cp -a $(INITRD_DIR)/initrd $(INITRD_DIR)/initrd.img
endif


PHONY += initrd
initrd:	$(INITRD_DIR)/initrd

#
#	  NOTE:  we don't want the initrd target to use the installed template 
#		dir, as it could complicate distribution -- you might have 
#		modified files in the template_dir, that aren't removed with a
#		'make install_template_dir', that you don't want released as 
#		part of the distribution. -BEF-
#
$(INITRD_DIR)/initrd:	$(INITRD_DIR)/build_dir-stamp
	$(MKCRAMFS) $(INITRD_BUILD_DIR) $(INITRD_DIR)/initrd

PHONY += install_initrd_template
install_initrd_template:	$(INITRD_DIR)/build_dir-stamp
	mkdir -p $(BOOT_BIN_DEST)
	rsync -a $(INITRD_BUILD_DIR)/ $(BOOT_BIN_DEST)/initrd_template/
	@echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	@echo "XXX Dann, I'm expecting this should this be part of:"
	@echo "XXX 	systemimager-initrd_template-$ARCH and" 
	@echo "XXX	systemimager-client will need to depend on it."
	@echo "XXX 	Do you agree? disagree?"
	@echo "XXX" 
	@echo "XXX  Still in progress, no need to answer yet..."
	@echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall
PHONY += install_initrd
install_initrd:	$(INITRD_DIR)/initrd.img
	mkdir -p $(BOOT_BIN_DEST)
	$(SI_INSTALL) -m 644 $(INITRD_DIR)/initrd.img \
	    $(BOOT_BIN_DEST)/initrd.img

initrd_get_source:	$(INITRD_SRC_DIR)/$(BUSYBOX_TARBALL) \
			$(INITRD_SRC_DIR)/$(DEVFSD_TARBALL) \
			$(INITRD_SRC_DIR)/$(DHCLIENT_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODUTILS_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODULE_INIT_TOOLS_TARBALL) \
			$(INITRD_SRC_DIR)/$(RSYNC_TARBALL) \
			$(INITRD_SRC_DIR)/$(UCLIBC_TARBALL) \
			$(INITRD_SRC_DIR)/$(UDPCAST_TARBALL)

PHONY += build_dir_clean
build_dir_clean:
	rm -rf $(INITRD_BUILD_DIR)
	rm -f $(INITRD_DIR)/build_dir-stamp

initrd_clean:	build_dir_clean $(subst .rul,_clean,$(shell cd $(INITRD_DIR)/make.d && ls *.rul))
	-find . -name "*~" -exec rm -f {} \;
	rm -f $(INITRD_DIR)/initrd
	rm -f $(INITRD_DIR)/initrd.img

initrd_distclean:	initrd_clean
	-rm -rf $(INITRD_SRC_DIR)

.PHONY:	all build_dir install get_source help helpless clean distclean \
	$(subst .rul,,$(shell cd make.d && ls *.rul)) uclibc_dev


# /* vi: set ai noet ts=4: */
