#
# "SystemImager"  
#
#  Copyright (C) 1999-2002 Bald Guy Software <brian.finley@baldguysoftware.com>
#  Copyright (C) 2002 Hewlett-Packard Company <dannf@fc.hp.com>
#
#  Others who have contributed to this code:
#    Sean Dague <sean@dague.net>
#
#   $Id$
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

SUDO = $(shell if [ `id -u` != 0 ]; then echo -n "sudo"; fi)

INITRD_PATCH_DIR = $(INITRD_DIR)/patches
INITRD_SRC_DIR = $(INITRD_DIR)/src
STAMP_DIR = $(INITRD_SRC_DIR)

INITRD_BUILD_DIR = $(INITRD_DIR)/build_dir
INITRD_MOUNT_DIR = $(INITRD_DIR)/mount_dir

SKEL_FILES = $(shell find $(INITRD_DIR)/skel -not -regex '.*/CVS.*' -and \
                                 -not -regex '.*/CVS')

# Number of inodes in the build directory and number of 
# inodes needed on the initial RAM disk -BEF-
BUILD_DIR_INODE_COUNT = $(shell $(SUDO) find $(INITRD_BUILD_DIR) -printf "%i\n" | sort -u | wc -l)
INITRD_INODE_COUNT = $(shell echo $(BUILD_DIR_INODE_COUNT) + 100 | bc)

# Total size of build directory and size to make raw initrd file -BEF-
BUILD_DIR_SIZE = $(shell sudo du -bks $(INITRD_BUILD_DIR) | cut -f1 )
INITRD_SIZE = $(shell echo $(BUILD_DIR_SIZE) + 250 | bc)

### BEGIN uclibc decisions ###
# Not all architectures use uclibc. -BEF-
ifeq ($(ARCH),i386)
	UCLIBC_ARCH_NAME := i386
endif
ifeq ($(ARCH),ppc)
	UCLIBC_ARCH_NAME := powerpc
endif

ifdef UCLIBC_ARCH_NAME
	UCLIBC_PATH = $(UCLIBC_DEV)/bin
	INITRD_BUILD_PATH = $(UCLIBC_PATH):$(PATH)
        UCLIBC_TARGET := $(INITRD_SRC_DIR)/uclibc_dev-stamp \
	                 $(INITRD_SRC_DIR)/uclibc_runtime-stamp
else
	INITRD_BUILD_PATH = $(PATH)
endif
### END uclibc decisions ###

PATH := $(INITRD_BUILD_PATH)

include $(INITRD_DIR)/make.d/*.rul

build_dir:	$(INITRD_DIR)/build_dir-stamp

$(INITRD_DIR)/build_dir-stamp:	$(SKEL_FILES) $(BUSYBOX_BINARY) \
				$(DEVFSD_BINARY) $(DHCLIENT_BINARY) \
				$(RSYNC_BINARY) $(UCLIBC_TARGET) \
				$(INSMOD_BINARY)

	# Create directory structure.
	$(SUDO) rm -fr $(INITRD_BUILD_DIR)
	mkdir $(INITRD_BUILD_DIR)
	cd $(INITRD_BUILD_DIR) && \
	  mkdir -m 755 bin dev etc lib proc root sbin usr var
	cd $(INITRD_BUILD_DIR) && \
	  mkdir -m 755 usr/bin usr/sbin etc/init.d var/run
	cd $(INITRD_BUILD_DIR) && mkdir -m 1777 tmp

	# Copy over busybox binary and all it's hard links. -BEF-
	cp -a $(INITRD_SRC_DIR)/$(BUSYBOX_DIR)/_install/* $(INITRD_BUILD_DIR)/

	# Copy over other binaries.
	cp -a $(RSYNC_BINARY) $(INITRD_BUILD_DIR)/bin
	cp -a $(DHCLIENT_BINARY) $(INITRD_BUILD_DIR)/sbin
	cp -a $(DEVFSD_BINARY) $(INITRD_BUILD_DIR)/sbin
	# If INSMOD_BINARY is set, then copy it on over. -BEF-
	[ "x$(INSMOD_BINARY)" == "x" ] || \
		cp -a $(INSMOD_BINARY) $(INITRD_BUILD_DIR)/sbin

	# If UCLIBC_TARGET is set, then copy over uclibc libraries. -BEF-
	[ "x$(UCLIBC_TARGET)" == "x" ] || mkdir -m 755 -p \
	  $(INITRD_BUILD_DIR)/usr/$(UCLIBC_ARCH_NAME)-linux-uclibc/lib/
	[ "x$(UCLIBC_TARGET)" == "x" ] || \
	  cp -a $(UCLIBC_RUNTIME)/lib/* \
	  $(INITRD_BUILD_DIR)/usr/$(UCLIBC_ARCH_NAME)-linux-uclibc/lib

	# If we're not using uclibc, then copy over the 
	# standard libs instead. -BEF-
	[ "x$(UCLIBC_TARGET)" != "x" ] || ( cd $(INITRD_BUILD_DIR) && \
	  $(INITRD_DIR)/mklibs.sh -v -d lib ./*bin/* ./lib/* )

	# Strip 'em. -BEF-
	strip $(INITRD_BUILD_DIR)/bin/*
	strip $(INITRD_BUILD_DIR)/sbin/*
	strip $(INITRD_BUILD_DIR)/usr/bin/*
	strip $(INITRD_BUILD_DIR)/usr/sbin/*

	# Copy over text files from the skel directory.
	cp -a $(INITRD_DIR)/skel/* $(INITRD_BUILD_DIR)
	$(SI_INSTALL) -m 755 $(INITRD_DIR)/skel/etc/init.d/rcS \
	  $(INITRD_BUILD_DIR)/etc/init.d/rcS

	# Copy over modules required prior to retrieving the autoinstall
	# binaries tarball. -BEF-
	cp -a $(INITRD_DIR)/my_modules $(INITRD_BUILD_DIR)

	# Clear out CVS cruft.
	find $(INITRD_BUILD_DIR) -type d -name CVS -depth | xargs rm -rf

	# Make sure root owns everything.
	$(SUDO) chown 0.0 -R $(INITRD_BUILD_DIR)/*

	# Changing the date stamps of the files helps the size of the ramdisk
	# stay more consistent between builds.  Sean Dague figured out this
        # optimal time stamp somehow... -BEF-
	$(SUDO) find $(INITRD_BUILD_DIR) -depth -exec touch -t 196912311900 {} \;
	$(SUDO) touch $(INITRD_DIR)/build_dir-stamp

$(INITRD_DIR)/initrd:	$(INITRD_DIR)/build_dir-stamp

	# Make sure any old ram disks are unmounted.
	-$(SUDO) umount $(INITRD_MOUNT_DIR)

	# Create ramdisk file and format.
	dd if=/dev/zero of=$(INITRD_DIR)/initrd bs=1k count=$(INITRD_SIZE)
	mke2fs -N $(INITRD_INODE_COUNT) -m 0 -q -F $(INITRD_DIR)/initrd

	# Mount the new ramdisk.
	mkdir -p $(INITRD_MOUNT_DIR)
	$(SUDO) mount $(INITRD_DIR)/initrd $(INITRD_MOUNT_DIR) -o loop

	# Use tar to cleanly lay down the files from our build directory into
	# our fresh ram disk -- without using any temporary files! -BEF-
	( cd $(INITRD_BUILD_DIR) ; $(SUDO) tar cpf - * ) | \
	  ( cd $(INITRD_MOUNT_DIR) ; $(SUDO) tar -xp)

	$(SUDO) umount $(INITRD_MOUNT_DIR) && rmdir $(INITRD_MOUNT_DIR)

$(INITRD_DIR)/initrd.gz:	$(INITRD_DIR)/initrd
	gzip -9 < $(INITRD_DIR)/initrd > $(INITRD_DIR)/initrd.gz
	du -b $(INITRD_DIR)/initrd.gz

########## BEGIN initrd ##########
# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall
initrd_install:
	$(MAKE) initrd.gz
	mkdir -p $(BOOT_BIN_DEST)
	$(SI_INSTALL) -m 644 $(INITRD_DIR)/initrd.gz $(BOOT_BIN_DEST)/initrd-$(FLAVOR)-$(VERSION).gz

# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall.
# This rule is for installing into the boot tarball.
install_initrd.gz:	$(INITRD_DIR)/initrd.gz
	$(SI_INSTALL) -m 644 $(INITRD_DIR)/initrd.gz \
	  $(BOOT_BIN_DEST)/initrd-$(FLAVOR)-$(VERSION).gz

initrd_get_source:	$(INITRD_SRC_DIR)/$(BUSYBOX_TARBALL) \
			$(INITRD_SRC_DIR)/$(DEVFSD_TARBALL) \
			$(INITRD_SRC_DIR)/$(DHCLIENT_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODUTILS_TARBALL) \
			$(INITRD_SRC_DIR)/$(RSYNC_TARBALL) \
			$(INITRD_SRC_DIR)/$(UCLIBC_TARBALL) 

initrd_clean:	$(subst .rul,_clean,$(shell cd $(INITRD_DIR)/make.d && ls *.rul))
	-$(SUDO) find . -name "*~" -exec rm -f {} \;
	-$(SUDO) umount $(INITRD_MOUNT_DIR)
	-$(SUDO) rm -rf $(INITRD_MOUNT_DIR) $(INITRD_BUILD_DIR)
	cd $(INITRD_DIR) && rm -f initrd initrd.gz
	rm -f $(INITRD_DIR)/build_dir-stamp

initrd_distclean:	clean
	-rm -rf $(INITRD_SRC_DIR)

.PHONY:	all build_dir install get_source help helpless clean distclean \
	$(subst .rul,,$(shell cd make.d && ls *.rul)) uclibc_dev
