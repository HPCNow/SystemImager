#!/usr/bin/perl -w
#
#   "SystemImager"
#
#   Copyright (C) 2003 Bald Guy Software 
#                      Brian Elliott Finley <brian@bgsw.net>
#
#   $Id$
#

use lib "USR_PREFIX/lib/systemimager/perl";
use strict;
use POSIX qw(setsid);
use SystemImager::Config;
use SystemImager::Flamethrower;
use vars qw($config $ft_config $VERSION);

$0 = "flamethrowerd";

my $file = '/etc/systemimager/flamethrower.conf';
SystemImager::Flamethrower->read_config($file) or die("Couldn't read $file!");

# Should we start up?
if ( $ft_config->start_flamethrower_daemon() ne "yes" ) {
    exit 0;
}

print "\n";
process_modules();

# Uncomment for debug info
#use Data::Dumper; print Dumper($ft_config);

exit 0; #XXX

my $pid_file = "/var/run/flamethrower.pid";


################################################################################
#
# Misc. Daemon stuff
#
################################################################################
chdir '/'                   or die "Can't chdir to /: $!";
open STDIN, '/dev/null'     or die "Can't read /dev/null: $!";
open STDOUT, '>>/dev/null'  or die "Can't write to /dev/null: $!";
open STDERR, '>>/dev/null'  or die "Can't write to /dev/null: $!";
umask 0;
sub REAPER {
    $SIG{CHLD} = \&REAPER;
    my $waitedpid = wait;
    print STDERR "Dead child: $waitedpid\n";
}
$SIG{CHLD} = \&REAPER;


################################################################################
#
# Fork the watching process
#
################################################################################
my $pid;
if ($pid = fork) {
} elsif (defined $pid) { # send the forked child off

    setsid or die "Can't start a new session: $!";

    my $file = $pid_file;
    local *FILE;
    open(FILE,">$file") or die ("FATAL: Can't open file: $file\n");
        print FILE "$$\n";
    close(FILE);

    # Subroutine(s) here XXX
    #tail_rsync_log_file();

} else {
        die "Can't fork: $!\n";
}


################################################################################
#
# BEGIN subroutines 
#

# Usage: process_modules();
sub process_modules {

print "\n"; #XXX
    #
    # Get list of explicitly specified portbase numbers so we don't 
    # dynamically use one that already exists.
    #
    my %portbases = $ft_config->varlist('_portbase$');

    print "Portbases:\n";
    foreach (values %portbases) {
        #
        # Make the values the keys, so we can simply to an 
        # if (defined()) in the module loop below.
        #
        $portbases{$_}=$_;
        print "$_\n";
    }
print "\n"; #XXX
    foreach (keys %portbases) {
        print "$_\n";
    }
print "\n"; #XXX

    #
    # Create the Flamethrower "directory" (sourceable files) for each module.
    my $modules = $ft_config->modules();
    foreach my $module ( @$modules ) {

        print STDOUT "MODULE=$module\n";

        # DIR
        if ( defined($ft_config->get("${module}_dir")) ) {
            print STDOUT "DIR=" . $ft_config->get("${module}_dir") . "\n";
        } else {
            die("Please set DIR in flamethrower.conf for [$module]!");
        }

        # PORTBASE
        my $portbase = $ft_config->get("${module}_portbase");
        if ( ! defined($portbase) ) {
            $portbase = ($ft_config->get("flamethrower_directory") + 2);
        }
        print STDOUT "PORTBASE=$portbase\n";



        print "\n";
    }
}

#
# END subroutines
#
################################################################################

