#!/usr/bin/perl -w
#
# "SystemImager" 
#
#  Copyright (C) 2003 Bald Guy Software
#                     Brian Elliott Finley <brian@bgsw.net>
#
#  $Id$
#

#XXX o change all instances of MCAST_GROUP to PORTBASE. -BEF-
#    o deal with --flavor
#    o deal with --arch

use lib "USR_PREFIX/lib/systemimager/perl";
use Getopt::Long;
use SystemImager::Server;
use SystemImager::Config;
use vars qw($config $VERSION %opts %udpcast_opts);

my $config_dir = "/etc/systemimager";

### BEGIN parse the config file ###
my $autoinstall_script_dir = $config->autoinstall_script_dir();

if (!$autoinstall_script_dir) {
    die "AUTOINSTALL_SCRIPT_DIR not defined in the config file.";
}
### END parse the config file ###

$VERSION="SYSTEMIMAGER_VERSION_STRING";
$program_name = "imagecast";
$version_info = <<"EOF";
$program_name (part of SystemImager) v$VERSION
    
Copyright (C) 2003 Brian Elliott Finley <brian\@bgsw.net>
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

$get_help = "\n Try \"--help\" for more options.";

$help_info = $version_info . <<"EOF";

Usage: $program_name [OPTION]... --script SCRIPTNAME

Options: (options can be presented in any order and may be abbreviated)

 --help                 Display this output.
 --version              Display version and copyright information.
 --verbose              Show additional information.

 --script SCRIPTNAME    Where SCRIPTNAME is the base name to use for the 
                        autoinstall script.

 --min-clients NUM      Number of clients that must connect before the casting
                        begins.  Superceeded if --max-client-wait times out.
                        Default is 1.

 --max-wait SEC         Initiate the cast after SEC seconds, even if the number
                        of clients specified by --min-clients have yet to 
                        connect.

 --min-wait SEC         Wait at least SEC seconds before initiating the cast, 
                        even if the number of clients specified by 
                        --min-clients have already connected.

 --cycle COUNT          Cycle through the casting process COUNT times.  The 
                        point here not to do perpetual re-installs, but to allow
                        clients that missed the start of one cast to catch the
                        next.  You might try this option in combination with 
                        some combination of --min-wait, --min-clients, and 
                        --max-wait.

 --portbase NUM         Base port number.  An even number is recommended.  Must
                        match the setting used in dhcpd.conf and/or local.cfg.
                        Default is 9000.


Simple Example:
 
 imagecast --verbose --script debian-testing --min-clients 128

 (The above command will wait until 128 clients have connected, then will begin
  casting the image specified in the debian-testing.master script.)


Additional Options:

 Below is a whole slew of additional options that, if specified, will be passed 
 to udp-sender.  Some of these are already used during standard conservative
 SystemImager operation, and have defaults that are indicated in (parentheses).
 I wouldn't expect that most of you would need to use most of these features, 
 but I've learned that you guys (SystemImager users) can find really strange 
 things to do with software that is way outside of the original scope. ;-)
 
 For details on these options, see "man udp-sender".

 --async
 --autostart             NUM
 --blocksize             NUM (1456)
 --broadcast             
 --fec                   STRIPESxREDUNDANCY/STRIPESIZE
 --full-duplex           
 --interface             NAME (eth0)
 --log                   FILE
 --max-bitrate           RATE
 --mcast-addr            AAA.BBB.CCC.DDD (automatically determined)
 --mcast-all-addr        AAA.BBB.CCC.DDD (224.0.0.1)
 --min-slice-size        NUM (16)
 --max-slice-size        NUM (1024)
 --slice-size            NUM
 --pointopoint
 --print-seed
 --rexmit-hello-interval MSEC
 --ttl                   NUM


Download, report bugs, and make suggestions at:
http://systemimager.org/
EOF

# Set some defaults. -BEF-
%opts = ();
%udpcast_opts = ();
$opts{'cycle'} = 1;
$opts{'portbase'} = 9000;
$udpcast_opts{'min-clients'} = 1;

# take options
GetOptions( 
    "help"                     => \$opts{'help'},
    "version"                  => \$opts{'version'},
    "verbose"                  => \$opts{'verbose'},
    "script=s"                 => \$opts{'script-name'},
    "cycle=i"                  => \$opts{'cycle'},
    "portbase=i"               => \$opts{'portbase'},

    "min-clients=i"            => \$udpcast_opts{'min-clients'},
    "max-wait=i"               => \$udpcast_opts{'max-wait'},
    "min-wait=i"               => \$udpcast_opts{'min-wait'},
    "async"                    => \$udpcast_opts{'async'},
    "autostart=i"              => \$udpcast_opts{'autostart'},
    "blocksize=i"              => \$udpcast_opts{'blocksize'},
    "broadcast"                => \$udpcast_opts{'broadcast'},
    "fec=s"                    => \$udpcast_opts{'fec'},
    "full-duplex"              => \$udpcast_opts{'full-duplex'},
    "interface=s"              => \$udpcast_opts{'interface'},
    "log=s"                    => \$udpcast_opts{'log'},
    "max-bitrate=s"            => \$udpcast_opts{'max-bitrate'},
    "mcast-addr=s"             => \$udpcast_opts{'mcast-addr'},
    "mcast-all-addr=s"         => \$udpcast_opts{'mcast-all-addr'},
    "min-slice-size=i"         => \$udpcast_opts{'min-slice-size'},
    "max-slice-size=i"         => \$udpcast_opts{'max-slice-size'},
    "pointopoint"              => \$udpcast_opts{'pointopoint'},
    "print-seed"               => \$udpcast_opts{'print-seed'},
    "rexmit-hello-interval=i"  => \$udpcast_opts{'rexmit-hello-interval'},
    "slice-size"               => \$udpcast_opts{'slice-size'},
    "ttl=i"                    => \$udpcast_opts{'ttl'},

) || die "$help_info";

$opts{'sender-opts'} = "";
foreach(sort keys %udpcast_opts) {
    if($udpcast_opts{$_}) {
        $opts{'sender-opts'} = "$opts{'sender-opts'} --$_ $udpcast_opts{$_}";
    }
}
#print "opts{'sender-opts'}: $opts{'sender-opts'}\n"; #XXX debug stuff

### BEGIN evaluate options ###
# if requested, print help information
if($opts{'help'}) { 
    print "$help_info";
    exit 0;
}

# if requested, print version and copyright information
if($opts{'version'}) {
    print "$version_info";
    exit 0;
}

# be sure program is run by root
SystemImager::Common->check_if_root();

unless ($opts{'script-name'}) {
    die "\n$program_name: --script SCRIPTNAME must be specified.\n$get_help\n\n";
}

# Deal with script
my $file = "$autoinstall_script_dir/$opts{'script-name'}.master";
if ($opts{'verbpse'}) { print qq(Using Script:  $file\n); }
unless (-e $file) {
    die "\n$program_name: Script $file doesn't exist!\n$get_help\n\n";
}
my $junk;
open (FILE, "<$file") or die ("Can't open $file for reading!");
    while (<FILE>) {
        if (m/IMAGENAME=/) {
            chomp;
            ($junk, $opts{'image'}) = split(/=/);
            next;
        }
        if (m/OVERRIDES=/) {
            chomp;
            ($junk, $opts{'overrides'}) = split(/=/);
            $opts{'overrides'} =~ s/"//g;
            next;
        }
    }

    if ($opts{'verbose'}) {
        print "Image Name:    $opts{'image'}\n";
        print "Overrides:     $opts{'overrides'}\n";
    }
close (FILE);

$opts{'image-path'} = SystemImager::Server->get_image_path( $config->rsync_stub_dir(), $opts{'image'} );

# Let the castings begin
if ($opts{'verbose'}) { print qq(Cast cycles:   $opts{'cycle'}\n\n); }
my $count = 0;
while ($count ne $opts{'cycle'}) {
    $count++;
    cast(
        $count,
    );
}


sub cast {

    my (
        $count,
    ) = @_;

    my ($tar_cmd, $cmd);
    my $portbase = $opts{'portbase'};

    
    ################################################################################ 
    # 
    # Casting_1: BOEL Binaries and autoinstall scripts
    #
    $tar_cmd = qq(tar -cf - -C /usr/share/systemimager/boot/i386/standard/ boel_binaries.tar.gz -C /var/lib/systemimager/ scripts);
    if (-e "$opts{'image-path'}/etc/raidtab") {
        $tar_cmd .= qq( -C $opts{'image-path'} etc/raidtab);
    }
    $cmd = qq(udp-sender $opts{'sender-opts'} --pipe '$tar_cmd' --portbase $portbase);
    if ($opts{'verbpse'}) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   BOEL binaries tarball and autoinstall scripts\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n); #XXX
    }
    !system($cmd) or die ("$cmd failed!");
    #
    ################################################################################ 
    
    ################################################################################ 
    # 
    # Casting_2: IMAGE
    #
    $portbase = $portbase + 2;
    $tar_cmd = qq(tar -cf - -C $opts{'image-path'} .);
    $cmd = qq(udp-sender $opts{'sender-opts'} --pipe '$tar_cmd' --portbase $portbase);
    if ($opts{'verbpse'}) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   The Image -- $opts{'image'}\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n);
    }
    !system($cmd) or die ("$cmd failed!");
    #
    ################################################################################ 
    
    ################################################################################ 
    # 
    # Casting_3: OVERRIDES
    #
    $portbase = $portbase + 2;
    $file = ".$opts{'image'}.$$";
    open (FILE, ">/tmp/$file") or die ("Can't open $file for writing!");
        print FILE qq(Bogus file sent in case no override directories exist -- the autoinstall\n);
        print FILE qq(client's will still be expecting to receive something...  This file can be\n);
        print FILE qq(safely deleted.\n);
    close(FILE);
    $tar_cmd = qq(tar -cf - -C /tmp $file);
    foreach my $override ( split(/[[:space:]]/,$opts{'overrides'}) ) {
        my $dir = "/var/lib/systemimager/overrides/$override";
        if (-d $dir) {
            $tar_cmd .= " -C $dir .";
        }
    }    
    $cmd = qq(udp-sender $opts{'sender-opts'} --pipe '$tar_cmd' --portbase $portbase);
    if ($opts{'verbpse'}) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   Override Directories\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n);
    }
    !system($cmd) or die ("$cmd failed!");
    unlink($file);
    # 
    ################################################################################ 
}

exit 0;

