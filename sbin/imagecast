#!/usr/bin/perl -w
#
# "SystemImager" 
#
#  Copyright (C) 2003 Bald Guy Software
#                     Brian Elliott Finley <brian@bgsw.net>
#
#  $Id$
#

#XXX o consider changing --mcast-group to --portbase, and subsequently all instances of MCAST_GROUP to PORTBASE. -BEF-
#    o figure out what to do about --misc-opts.  Add all udp-sender opts in?  or what?
#    o deal with --flavor
#    o deal with --arch
#

use lib "USR_PREFIX/lib/systemimager/perl";
use Getopt::Long;
use SystemImager::Server;
use SystemImager::Config;
use vars qw($config $VERSION);

my $config_dir = "/etc/systemimager";

### BEGIN parse the config file ###
my $autoinstall_script_dir = $config->autoinstall_script_dir();

if (!$autoinstall_script_dir) {
    die "AUTOINSTALL_SCRIPT_DIR not defined in the config file.";
}
### END parse the config file ###

$VERSION="SYSTEMIMAGER_VERSION_STRING";
$program_name = "imagecast";
$version_info = <<"EOF";
$program_name (part of SystemImager) v$VERSION
    
Copyright (C) 2003 Brian Elliott Finley <brian\@bgsw.net>
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

$get_help = "\n       Try \"-help\" for more options.";

$help_info = $version_info . <<"EOF";

Usage: $program_name [OPTION]... --script SCRIPTNAME

Options: (options can be presented in any order and may be abbreviated)

 --help                 Display this output.

 --version              Display version and copyright information.

 --verbose              Show additional information.

 --script SCRIPTNAME    Where SCRIPTNAME is the base name to use for the 
                        autoinstall script.

 --min-clients NUM      Number of clients that must connect before the casting
                        begins.  Superceeded if --max-client-wait times out.
                        Default is 1.

 --max-wait SEC         Initiate the cast after SEC seconds, even if the number
                        of clients specified by --min-clients have yet to 
                        connect.

 --min-wait SEC         Wait at least SEC seconds before initiating the cast, 
                        even if the number of clients specified by 
                        --min-clients have already connected.

 --cycle COUNT          Cycle through the casting process COUNT times.  The 
                        point here not to do perpetual re-installs, but to allow
                        clients that missed the start of one cast to catch the
                        next.  You might try this option in combination with 
                        some combination of --min-wait, --min-clients, and 
                        --max-wait.

 --portbase NUM         Base port number.  An even number is recommended.  Must
                        match the setting used in dhcpd.conf and/or local.cfg.
                        Default is 9000.

 --misc-opts "OPTIONS"  Miscellaneous options to be passed directly to 
                        udp-sender (the multicast transport).  Two useful 
                        examples are "--interface eth1" and "--max-bitrate 25M".
                        Multiple options should be quoted together: 
                        "--interface eth1 --max-bitrate 25M".  See 
                        "man udp-sender" for details and many other options.  

                        NOTE: Do not specify udp-sender's --portbase option, as 
                        this is set by the --mcast-group option.

Simple Example:
 
 imagecast --verbose --script debian-testing --min-clients 128


Download, report bugs, and make suggestions at:
http://systemimager.org/
EOF

# Set some defaults. -BEF-
my $portbase = 9000;
my $udp_sender_opts = "";
my $max_wait = 0;
my $min_wait = 0;
my $min_clients = 1;
my $cycle = 1;

# take options
GetOptions( 
    "help"              => \my $help,
    "version"           => \my $version,
    "verbose"           => \my $verbose,
    "script=s"          => \my $script_name,
    "min-clients=i"     => \$min_clients,
    "mcast-group=i"     => \$portbase,
    "cycle=i"           => \$cycle,
    "max-wait=i"        => \$max_wait,
    "min-wait=i"        => \$min_wait,
    "misc-opts=s"       => \$udp_sender_opts,
) || die "$help_info";

### BEGIN evaluate options ###
# if requested, print help information
if($help) { 
    print "$help_info";
    exit 0;
}

# if requested, print version and copyright information
if($version) {
    print "$version_info";
    exit 0;
}

# be sure program is run by root
SystemImager::Common->check_if_root();

unless ($script_name) {
    die "\n$program_name: --script SCRIPTNAME must be specified.\n$get_help\n\n";
}

#XXX
#unless ($min_clients) {
#    die "\n$program_name: --min-clients must be specified.\n$get_help\n\n";
#}

my $file = "$autoinstall_script_dir/${script_name}.master";
if ($verbose) { print qq(Using Script:  $file\n); }

unless (-e $file) {
    die "\n$program_name: Script $file doesn't exist!\n$get_help\n\n";
}

my ($junk, $image, $overrides);
open (FILE, "<$file") or die ("Can't open $file for reading!");
    while (<FILE>) {
        if (m/IMAGENAME=/) {
            chomp;
            ($junk, $image) = split(/=/);
            next;
        }
        if (m/OVERRIDES=/) {
            chomp;
            ($junk, $overrides) = split(/=/);
            $overrides =~ s/"//g;
            next;
        }
    }

    if ($verbose) {
        print "Image Name:    $image\n";
        print "Overrides:     $overrides\n";
    }
close (FILE);

if ($verbose) {
    print qq(Cast cycles:   $cycle\n\n);
}
my $count = 0;
while ($count ne $cycle) {
    $count++;
    cast(
        $image, 
        $min_wait,
        $max_wait,
        $min_clients,
        $portbase,
        $overrides,
        $count
    );
}

sub cast {

    my (
        $image, 
        $min_wait,
        $max_wait,
        $min_clients,
        $portbase,
        $overrides,
        $count
        ) = @_;

    my $rsync_stub_dir = $config->rsync_stub_dir();
    my $image_path = SystemImager::Server->get_image_path( $rsync_stub_dir, $image );
    my $tar_cmd;
    my $opts;
    
    ################################################################################ 
    # 
    # Casting_1: BOEL Binaries and autoinstall scripts
    #
    $tar_cmd = qq(tar -cf - -C /usr/share/systemimager/boot/i386/standard/ boel_binaries.tar.gz -C /var/lib/systemimager/ scripts);
    if (-e "${image_path}/etc/raidtab") {
        $tar_cmd .= qq( -C $image_path etc/raidtab);
    }
    $opts = qq($udp_sender_opts --pipe '$tar_cmd' --min-client-wait $min_wait --max-client-wait $max_wait --min-clients $min_clients --portbase $portbase);
    $cmd = qq(udp-sender $opts);
    if ($verbose) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   BOEL binaries tarball and autoinstall scripts\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n); #XXX
    }
    !system($cmd) or die ("$cmd failed!");
    #
    ################################################################################ 
    
    ################################################################################ 
    # 
    # Casting_2: IMAGE
    #
    $portbase = $portbase + 2;
    $tar_cmd = qq(tar -cf - -C $image_path .);
    $opts = qq($udp_sender_opts --pipe '$tar_cmd' --min-client-wait $min_wait --max-client-wait $max_wait --min-clients $min_clients --portbase $portbase);
    $cmd = qq(udp-sender $opts);
    if ($verbose) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   The Image -- $image\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n);
    }
    !system($cmd) or die ("$cmd failed!");
    #
    ################################################################################ 
    
    ################################################################################ 
    # 
    # Casting_3: OVERRIDES
    #
    $portbase = $portbase + 2;
    $file = ".${image}.$$";
    open (FILE, ">/tmp/$file") or die ("Can't open $file for writing!");
        print FILE qq(Bogus file sent in case no override directories exist -- the autoinstall\n);
        print FILE qq(client's will still be expecting to receive something...  This file can be\n);
        print FILE qq(safely deleted.\n);
    close(FILE);
    $tar_cmd = qq(tar -cf - -C /tmp $file);
    foreach my $override ( split(/[[:space:]]/,$overrides) ) {
        my $dir = "/var/lib/systemimager/overrides/$override";
        if (-d $dir) {
            $tar_cmd .= " -C $dir .";
        }
    }    
    $opts = qq($udp_sender_opts --pipe '$tar_cmd' --min-client-wait $min_wait --max-client-wait $max_wait --min-clients $min_clients --portbase $portbase);
    $cmd = qq(udp-sender $opts);
    if ($verbose) { 
        print qq(\n);
        print qq(Cycle:         $count\n);
        print qq(Now Casting:   Override Directories\n);
        print qq(Base Port:     $portbase\n);
        print qq(cmd:           $cmd\n);
    }
    !system($cmd) or die ("$cmd failed!");
    unlink($file);
    # 
    ################################################################################ 
}

exit 0;

