#!/usr/bin/perl -w
#
#  "SystemImager"
#
#  Copyright (C) 2005 Andrea Righi <a.righi@cineca.it>

use lib "USR_PREFIX/lib/systemimager/perl";
use strict;
use Getopt::Long;
use SystemImager::HostRange;

my $VERSION = "SYSTEMIMAGER_VERSION_STRING";

my $program_name = "si_psh";

my $version_info = << "EOF";
$program_name (part of SystemImager) v$VERSION

Copyright (C) 2006 Andrea Righi <a.righi\@cineca.it>

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

my $help_info = $version_info . <<"EOF";

Usage: $program_name --hosts host_range [OPTION]... COMMAND

Options: (options can be presented in any order and can be abbreviated)
 --help|-h              Display this output.

 --version, -v          Display version and copyright information.

 --max, -m=NUM          Set the maximum number of concurrent sessions
                        to NUM.

 --hosts, -n=HOST_LIST  List of target nodes. List can be separated by
                        comma, spaces or new line and can include
                        ranges (e.g. "node001-node256,node300 node400").

 --hosts-file, -f=FILE  File that contains the list of the target hosts
                        (one host per line).

 --timeout, -t=NUM      Set the timeout of the ssh sessions.

 --ssh-user, -l=USER    Run the command as user USER.

EOF

Getopt::Long::Configure("posix_default");
Getopt::Long::Configure("no_gnu_compat");
Getopt::Long::Configure("bundling");

GetOptions(
	"help|h"		=> \my $help,
	"version|v"		=> \my $version,
	"max|m=i"		=> \my $concurrents,
	"hosts|n=s"		=> \my $hostlist,
	"hosts-file|f=s"	=> \my $hostlist_file,
	"timeout|t=i"		=> \my $timeout,
	"ssh-user|l=s"		=> \my $ssh_user,
) or die("$help_info");

### BEGIN evaluate commad line options ###

if ($help) {
	print "$help_info";
	exit(0);
}

if ($version) {
	print "$version_info";
	exit(0);
}

my $cmd;
if (@ARGV) {
	$cmd = join(' ', @ARGV)
}

my @hosts = ();
if ($hostlist) {
	@hosts = split(/,| |\n/, $hostlist);
	# Expand host ranges.
	my %expanded_hosts = ();
	foreach my $range (@hosts) {
		SystemImager::HostRange::expand_range(\%expanded_hosts, $range);
	}
	@hosts = keys(%expanded_hosts);
} elsif ($hostlist_file) {
	open(IN, "<$hostlist_file") ||
		die("error: could't read $hostlist_file!\n");
	chomp(@hosts = <IN>);
	close(IN);
} else {
	die("error: no host defined!\nTry \"--help\" for more options.\n");
}

unless ($concurrents) {
	$concurrents = 32;
}

unless ($timeout) {
	$timeout = 15;
}

unless ($ssh_user) {
	$ssh_user = $ENV{'USER'};
}

### END evaluate command line options ###

# Use the following ssh options.
my $ssh_opts = "-x -o BatchMode=yes -o ConnectTimeout=$timeout -l $ssh_user";

# Number of concurrent sessions.
my $workers = 0;

unless ($cmd) {
	die("error: no command defined!\nTry \"--help\" for more options.\n");
} else {
	psh_execute();
}

# Usage:
# psh_execute();
# Description:
#       Execute the command $cmd in the target hosts.
sub psh_execute
{
	thread_pool_spawn();
	while ($workers) {
		thread_pool_wait();
	}
}

# Usage:
# thread_pool_wait();
# Description:
#       Wait the completion of running sessions when the maximum number
#       of concurrent processes is reached.
sub thread_pool_wait
{
	wait;
	$workers--;
}

# Usage:
# thread_pool_spawn();
# Description:
#       Spawn the pool of sessions to the target hosts.
sub thread_pool_spawn
{
	foreach my $host (@hosts) {
		do_cmd($host);
		$workers++;
		if ($workers >= $concurrents) {
			thread_pool_wait();
		}
	}
}

# Usage:
# do_cmd($host);
# Description:
#       Run a command on a single remote host.
sub do_cmd
{
	my $host = shift;
	my $pid;

	if ($pid = fork) {
		return;
	} elsif (defined $pid) {
		my @out = `ssh $ssh_opts $host $cmd 2>&1`;
		if ($?) {
			select(STDERR);
		}
		$| = 1;
		foreach (@out) {
			print $host . ': ' . $_;
		}
		exit(0);
	} else {
		print STDERR "$host: couldn't fork a ssh session!\n";
	}
}

__END__

=head1 NAME

si_psh - SystemImager Parallel Shell

=head1 SYNOPSIS

si_psh --hosts host_range [OPTION]... COMMAND

=head1 DESCRIPTION

B<si_psh> is a parallel shell to concurrently execute commands on
multiple nodes.

=head1 OPTIONS

=over 8
 
=item B<--help | -h>

Display a short help.

=item B<--version | -V>

Display version and copyright information.

=item B<--max | -m NUM>

Set the maximum number of concurrent sessions to NUM.

=item B<--hosts | -n HOST_LIST>

List of target nodes.
List can be separated by comma, spaces or new line and can include
ranges (e.g. "node001-node256,node300 node400").

=item B<--hosts-file | -f FILE>

File that contains the list of the target hosts (one host per line).

=item B<--timeout | -t NUM>

Set the timeout of the ssh sessions.

=item B<--ssh-user | -l USER>

Run the command as user USER.

=head1 SEE ALSO

systemimager(8), perldoc si_pcp

=head1 AUTHOR

Andrea Righi <a.righi@cineca.it>.

=head1 COPYRIGHT AND LICENSE

Copyright 2003 by Andrea Righi <a.righi@cineca.it>.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=cut

