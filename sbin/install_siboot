#!/usr/bin/perl -w

#
# "SystemImager"
#
#  Copyright (C) 2002 Hewlett-Packard Company <dannf@fc.hp.com>
#  Copyright (C) 2002 Bald Guy Software <brian.finley@baldguysoftware.com>
#
#   $Id$
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#
#   This tool is used to install additional autoinstall binaries that
#   are available outside of the upstream systemimager releases, commonly
#   to add support for additional hardware.  These additional binaries are
#   available in .tar.bz2 form, and must use the following naming conventions.
#   
#   Example filename: "systemimager-boot-<arch>-<flavor>-<version>.tar.bz2"
#
#    <arch>    Is the architecture for which these binaries were provided.
#    <flavor>  Is a short description of the additional functionality it
#              provides.
#    <version> Is the version string of the upstream SystemImager release
#              the included binaries are intended to enhance.
#   
#   Within this tarball, the following files are required:
#
#     README
#      A text file that provides a detailed description of the included 
#      binaries, along with any release notes.  This will be displayed for the
#      user prior to installation.
#   
#     kernel-<flavor>-<version> 
#      An autoinstall kernel, where <flavor> and <version> match the strings 
#      used in the name of the tarball.
#
#     config-<flavor>-<version> 
#      The .config that was used to create kernel-<flavor>-<version>.  This is
#      required if a kernel-<flavor>-<version> file is included.
#
#     initrd-<flavor>-<version>.gz 
#      An autoinstall ramdisk, where <flavor> and <version> match the strings 
#      used in the name of the tarball.
#   
#
#  The following files are optional, and are discouraged:
#
#   <binary>-<flavor>-<version>
#    Additional binaries that may be pulled over by the autoinstall client, 
#    where <flavor> and <version> match the strings used in the name of the 
#    tarball.  Note that additional modifications may be needed in the master
#    autoinstall script or the initial RAM disk to take advantage of these
#    binaries.
#

use lib "USR_PREFIX/lib/systemimager/perl";
use SystemImager::Server;
use SystemImager::Common;

use AppConfig;
use File::Basename;
use Carp;

SystemImager::Common->check_if_root();

unless (scalar(@ARGV) >= 0) {
    usage();
}

my $config = AppConfig->new(
   'autoinstall_script_dir' => { ARGCOUNT => 1 },
   'autoinstall_boot_dir' => { ARGCOUNT => 1 },
   'default_image_dir' => { ARGCOUNT => 1 },
   'rsyncd_conf' => { ARGCOUNT => 1 },
   'rsync_stub_dir' => { ARGCOUNT => 1 },
   'quiet' => { ARGCOUNT => 0, DEFAULT => 0 }
);

$config->file('/etc/systemimager/server.conf');

my $autoinstall_boot_dir = $config->autoinstall_boot_dir();
my $rsyncd_conf = $config->rsyncd_conf();
my $quiet = $config->quiet();

my $arg = "";
my $arch = "";
my $flavor = "";
my $version = "";
my $pager = "";

$pager = $ENV{PAGER};
unless ($pager) { $pager = "more"; }

## confirm that all the binaries we need are installed on this system
my @files = ("$pager", "bzcat", "tar");
foreach my $file (@files) {
    SystemImager::Common->which($file,$ENV{PATH}) || croak "$file not found in your path.";
}

foreach my $arg (@ARGV) {
    $kernel_found = 0;
    $config_found = 0;
    $initrd_found = 0;

    unless ( -f "$arg" ) {
	croak "$arg does not exist or is not a regular file.\n";
    }

    @tarball_contents = tar_ls($arg);

    $dir = basename($arg);
    $dir =~ s/\.tar(\.bz2)$//;

    ## display the README file
    $readme = "$dir/README";
    system("bzcat $arg | tar -O -x $readme | $pager");

    $_ = $dir;
    if(/^systemimager-boot-(\w+)-(\w+)-(.*)$/) {
	$arch = $1;
	$flavor = $2;
	$version = $3;
    
	$dest = "$autoinstall_boot_dir/$arch";

	unless ( -d "$dest" ) {
	    unless ($quiet) {
		print "Creating $dest...\n";
	    }
	    system("mkdir -p $dest");
	}
    
	foreach my $file (@tarball_contents) {
	    if ( $file =~  m/^kernel-$flavor-$version$/ ) {
		$kernel_found = 1;
	    }
	    
	    if ( $file =~ m/^config-$flavor-$version$/ ) {
		$config_found = 1;
	    }

	    if ( $file =~ m/^initrd-$flavor-$version.gz$/ ) {
		$initrd_found = 1;
	    }
	    
	    unless ( $file =~ m/^.*-$flavor-$version(.gz)?$/ ) {
		# standard will not be excluded from this in future releases
		unless ( "$flavor" eq "standard" ) {
		    print STDERR "Warning:  $file is not in <name>-<flavor>-<version> format.\n";
                }		
	    }
	    unless ($quiet) {
		print "Extracting $file...\n";
	    }
	    system("bzcat $arg | tar -x -O $dir/$file > $dest/$file");
	}
    
	# Complain if the tarball violates policy.
        unless ( $kernel_found ) {
	    print STDERR "Warning:  kernel not found.\n";
	}
        unless ( $config_found ) {
	    print STDERR "Warning:  kernel config file not found.\n";
	}
        unless ( $initrd_found ) {
	    print STDERR "Warning:  initial ramdisk (initrd.gz) not found.\n";
	}
    }
}

sub usage {
    print "Usage: $0 <boot tarball1> <boot tarball2>...\n";
    return 0;
}

sub tar_ls {
    my $file = shift;
    my @filelist = ();

    $_ = $file;
    /.*\.tar.bz2$/ || return undef;
    
    $dir = basename($file);
    $dir =~ s/\.tar(\.bz2)$//;

    open(TARBALL, "bzcat $file | tar -t |") or return undef;

    while (<TARBALL>) {
	chomp;
	if ( m{^$dir/([^/]+)$} ) {
	    # we only want normal files in $dir, not subdirectories
	    push @filelist, $1;
	}
     }

    close TARBALL;

    return @filelist;
}
