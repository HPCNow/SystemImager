#!/usr/bin/perl -w

#
# "VA SystemImager" - Copyright (C) 1999-2000 Brian Elliott Finley <brian@valinux.com>
#
# This file is: updateclient
#

# set version_number
$version_number="1.0";

# declare modules
use Getopt::Long;

# set version information
$version_info = <<"EOF";
updateclient (part of SystemImager) version $version_number

Copyright (C) 1999-2000 Brian Elliott Finley <brian\@valinux.com>
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF

# set help information
$help_info = $version_info . <<"EOF";

Usage: updateclient [OPTION]... --imageserver HOSTNAME --image IMAGENAME
  or   updateclient --imageserver HOSTNAME --listing

Options: (options can be presented in any order)
 --help                    Display this output.
 --version                 Display version and copyright information.
 --imageserver HOSTNAME    Hostname or IP address of the imageserver.
 --image IMAGENAME         Image from which the client should be updated.
 --directory DIRECTORY     Absolute path of directory to be updated.
                           (defaults to "/")
 --listing                 List avaliable images on imageserver.
                           (supercedes and ignores all options 
                            other than --imageserver)
 --nolilo                  Don't run lilo after update completes.
                           (lilo is always run unless specified)
 --reboot                  Reboot client after update completes.

Download from http://systemimager.org/
Report bugs or suggestions to <systemimager-bugs\@systemimager.org>
EOF

# interpret command line options
GetOptions( "listing" => \$listing,
            "help" => \$help,
            "version" => \$version,
            "reboot" => \$reboot,
            "nolilo" => \$nolilo,
            "imageserver=s" => \$imageserver,
            "image=s" => \$image,
            "directory=s" => \$directory,
) or die qq($help_info);

# if requested, print help information
if($help) { die qq($help_info); }

# if requested, print version and copyright information
if($version) { die qq($version_info); }

# be sure $imageserver name doesn't start with a hyphen
if($imageserver) {
  $_ = $imageserver;
  if(/^-/) { die qq(Imageserver name can't start with a hyphen.\n\n$help_info); }
}

# be sure $image doesn't start with a hyphen
if($image) {
  $_ = $image;
  if(/^-/) { die qq(Image name can't start with a hyphen.\n\n$help_info); }
}

# if usage is bad, print help information
#if($image /
unless( ($imageserver and $image) or ($imageserver and $listing) ) { 
  die qq($help_info);
}

# if listing, get listing
if($listing) {
  print qq(Available image(s):\n);
  $command = qq(rsync -v $imageserver) . q(::);
  system($command);
  exit 0;
}

# if not run as root, this script will surely fail
if($< != 0) { die "Must be run as root!\n"; }

# go ahead and do that thing you do
# set directory to default if not specified on command line
if(!$directory) {
  $directory = "/";
} else {
  # in case directory doesn't already have one, add a trailing slash
  # (We could easily test to see if it does, but we've got to normalize multiple
  #  slashes into one down below anyway...  Same number of functions to execute.)
  $directory = $directory . "/";
  
  # turn multiple slashes "///" into a single slash "/"
  # (So maybe we don't really have to do this -- things will work with multiple
  #  slashes.  This is actually done to avoid user consternation when reading
  #  any output that might include the multiple slashes.)
  $directory =~ s/\/+/\//g;
}

# start with base command
$command = "rsync -avz";

# get exclusions from /etc/systemimager.exclude
open(SYSTEMIMAGER_EXCLUDE, "< /etc/systemimager.exclude") or die "Couldn't open /etc/systemimager.exclude for reading: $!\n";
while (<SYSTEMIMAGER_EXCLUDE>) {
    if (/^\s*\//) {  # match non commented explicit path
      chomp;
      $command = $command . qq( --exclude=$_);
    }
}
close(SYSTEMIMAGER_EXCLUDE);

# append currently mounted non ext2 filesystems to exclusions list
open(ETC_MTAB, "< /etc/mtab") or die "Couldn't open /etc/mtab for reading: $!\n";
while (<ETC_MTAB>) {
    chomp;
    @fields = split(/ /, $_);
    unless( ($fields[2] eq "ext2") or ($fields[1] eq '/proc') or ($fields[1] eq '/dev/pts') ) {
      $command = $command . qq( --exclude=$fields[1]);
    }
}
close(ETC_MTAB);
  
# finalize command
$command = $command . qq( --delete $imageserver) . q(::) . qq($image$directory $directory);
  
# execute command
print qq(Updating image...\n);
system($command);
  
# lilo
unless($nolilo) { 
    print qq(running lilo...\n);
    system("/sbin/lilo");
}
  
# reboot
if($reboot) { 
    print qq(rebooting...\n);
    system("/bin/sleep 10s; /sbin/init 6");
}

exit 0;
