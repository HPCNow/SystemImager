<chapter>
  <title>Usage</title>
  <section>
    <title>How Does it Work? (summary)</title>
    <para>
      The basic idea behind <application>SystemImager</application> is 
      to retrieve the entire system image from a "golden client" to an 
      "image server".  This image can then be replicated to any number of 
      client systems.
    </para>
    <para>
      Once your client systems have had the initial image replicated to them,
      they can be updated/upgraded by syncing them to an updated image on the
      image server.  During an update, only the modified parts of files are 
      pulled to the client.  This makes for a fast, efficient, and accurate
      mass update.
    </para>
  </section>
  <section>
    <title>Image-Based Installations</title>
    <para>
      To simplify installation, SystemImager uses images it retrieves from
      a golden client, which is a system you have customized to work
      exactly the way you want.  You can re-compile the kernel, install
      custom software, and do any configuration file tweaking you like.
      The <command>getimage</command> command pulls the golden image to the
      image server for deployment to other systems.
    </para>
    <note>
      <para>
	Tools other than SystemImager are available for doing automatic
	installations which install systems based on a list of pre-defined
	packages (RedHat's KickStart, for example).  However, such
	package-based installs can be very limiting because they don't
	have an automated way to deal with non-packaged files.  If you
	re-compile your kernel, add a piece of non-packaged software, or
	modify certain configuration files, package-based installation
	methods usually require you to do some sort of scripting or
	programming to deal with these "special cases."
      </para>
    </note>
  </section>
  <section>
    <title>Overview of SystemImager Usage</title>
    <para>
      This section describes common procedures
      SystemImager.
    </para>
    <section>
      <title>Creating an Image</title>
      <para>
	SystemImager is an image based deployment tool.  Images are created
	from running systems, referred to as "golden clients."  You first
	configure the software on a system, and replicate the image of that
	system (or golden client) onto other machines.
      </para>
      <para>
	Another component of the System Installation Suite is System Installer.
	System Installer allows you to install Linux directly to an image,
	bypassing the golden client step.  System Installer packages and
	documentation can be found at
	<ulink url="http://systeminstaller.sourceforge.net">
	  http://systeminstaller.sourceforge.net
	</ulink>
      </para>
      <section>
	<title>Preparing a Golden Client</title>
	<orderedlist>
	  <listitem>
	    <para>
	      Once you've selected a machine to use as a golden client, install
	      and configure a Linux distribution and any additional software
	      that you want your image to contain onto it.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      On the golden client, run the command
	      <command>prepareclient</command> as root.  This will create
	      various files in your /etc/systemimager directory that contain
	      information on your disk partitionscheme, filesystem types, etc.
	      <command>prepareclient</command> will also start an rsync daemon
	      to allow it's files to be transferred to a server.
	    </para>
	    <warning>
	      <para>
		If you are not running this in ssh mode, all files on your
		golden client will be openly accessible to anyone with access
		to your network.  Once you have successfully pulled the image
		from your golden client, you can deactive the
		<command>rsync</command> daemon by killing the
		<command>rsync</command> process, or by simply rebooting the
		golden client.  This <command>rsync</command> server will not
		be started automatically on future reboots.
	      </para>
	    </warning>
	  </listitem>
	</orderedlist>
	<para>
	  At this point, your golden client is ready to have it's image pulled
	  by an image server.
	</para>
      </section>
      <section>
	<title>Pulling an Image from a Golden Client</title>
	<para>
	  Once your golden client has been prepared, you can then pull it's
	  image to your image server.
	</para>
	<para>
	  After installing the systemimager-server package on your image
	  server, run the <command>getimage</command> command on the image
	  server.  For example:
	</para>
	<example>
	  <title>
	    Creating Image "my_webserver_v1" from Golden Client 192.168.1.1
	  </title>
	  <para>
	    To create an image "my_webserver_v1" from a golden client with the
	    IP address 192.168.1.1, run the following command on your image
	    server as root:
	    <command>
	      getimage -golden-client 192.168.1.1 -image my_webserver_v1
	    </command>
	  </para>
	</example>
	<para>
	  <command>getimage</command> contacts the golden client and
	  requests its
	  <filename>/etc/systemimager/mounted_filesystems</filename> file,
	  which contains the list of mounted filesystems and their mount
	  points.  It pulls out the mount points for the filesystems that
	  are unsupported and creates an exclusion list.  The filesystems
	  SystemImager currently supports are ext2, ext3 and reiserfs.
	  All other filesytems will be ignored, including proc, nfs,
	  devpts, iso9660, etc.
	</para>
      </section>
      <section>
	<title>Assigning Autoinstall Clients to an Image</title>
	<para>
	  Run <command>addclients</command> on the image server to tell it
	  which clients will receive which image.
	  <command>addclients</command> will create a symbolic link for each
	  specified autoinstall client to the master script for the image to
	  which it is assigned.  <command>addclients</command> also
	  populates the image server's <filename>/etc/hosts</filename> and 
	  <filename>/var/lib/systemimager/scripts/hosts</filename> files.  The
	  hosts file provides the default mechanism used by autoinstall clients
	  to lookup their hostnames.
	</para>
	<para>
	  When <command>addclients</command> is ran without arguments, it will
	  interactively take you through three configuration screens.
	</para>
	<orderedlist>
	  <listitem>
	    <para>
	      The first section is where you specify the hostname pattern of
	      your autoinstall clients.  Autoinstall client hostnames are of
	      the form [basename][number].
	      <command>addclients</command> will ask for a basename and a
	      range.  For example, if you choose "proxy" as your basename, and
	      3-10 as your range, you will have defined the following
	      autoinstall clients:
	    </para>
	    <simplelist>
	      <member>proxy3</member>
	      <member>proxy4</member>
	      <member>proxy5</member>
	      <member>proxy6</member>
	      <member>proxy7</member>
	      <member>proxy8</member>
	      <member>proxy9</member>
	      <member>proxy10</member>
	    </simplelist>
	  </listitem>
	  <listitem>
	    <para>
	      Section 2 of the <command>addclients</command> command is where
	      you map the clients defined in Section 1 to an image.
	    </para>
	    <note>
	      <para>
		Each invocation of <command>addclients</command> allows you
		to map a single range of clients to an image.
		If you want to map non-consecutive ranges of clients to an
		image, or want to map different client ranges to different
		images, you will need to execute the
		<command>addclients</command> command multiple times.
	      </para>
	    </note>
	  </listitem>
	  <listitem>
	    <para>
	      Section 3 of the <command>addclients</command> command asks
	      you for a range of IP addresses from which it populates your
	      <filename>/etc/hosts</filename> and
	      <filename>/var/lib/systemimager/scripts/hosts</filename> files.
	      When an autoinstall clients boots, it will attempt to retrieve
	      the latter file from the image server and use it to look up it's
	      hostname.  If this step fails, the client will attempt to do
	      a reverse DNS lookup.  If you have PTR records configured for
	      each of your autoinstall clients, this step can be skipped -
	      although having both is recommended, as it is more robust.
	    </para>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>
  <section>
    <title>The Actual Step-by-Step HOWTO</title>
    <orderedlist>
      
      <listitem>
	<para>
	  Install the <application>SystemImager</application> server package
	  on the machine you have chosen as your image server.  
	</para>
      </listitem>
      
      <listitem>
	<para>
	  Install Linux on your "golden client".  Configure this "golden
	  client" as you normally would any machine.  Install Linux on this
	  node with the understanding that the software installed will
	  eventually constitute the image for all other nodes installed
	  with <application>SystemImager</application>.  Don't worry too much
	  about getting it exactly right the first time, since you can easily
	  use <application>SystemImager</application> to make incremental
	  changes to your image and distribute those changes without doing a
	  complete re-install.
	</para>
	
      </listitem>
      
      <listitem>
	<para>
	  Run <command>getimage</command> on the image server to pull the image
	  from the "golden client" to the image server.
	</para>
	
	<example>
	  <title>Pull the "golden client's" image to the image server</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata format="jpg" fileref="images/si_image3.jpg">
	    </imageobject>
	    <imageobject>
	      <imagedata format="eps" fileref="images/si_image3.eps">
	    </imageobject>
	    <textobject>
	      <phrase>
		Pull the "golden client's" image to the image server
	      </phrase>
	    </textobject>
	  </mediaobject>
	</example>
	
	<para>
	  The basic syntax is: "<command>getimage</command> <command>-golden-client</command> [client_hostname] <command>-image</command> [image_name]"
	</para>
	<para>
	  Where [client_hostname] is the hostname or IP address of the
	  "golden client" and [image_name] is the name that you want to give
	  to this image.  There are many other options that can be seen with
	  "<command>getimage -help</command>".
	</para>
	
	<example>
	  <title>Running getimage</title>
	  <programlisting>
	    [root@imageserver]# getimage -g my-golden-client -image web_server_image_v1
	  </programlisting>
	</example>
      </listitem>
      
      <listitem>
	<para>
	  Run <command>addclients</command> on the image server to tell it
	  which clients will receive which image, and to populate the 
	  image server's <filename>/etc/hosts</filename> and
	  <filename>/tftpboot/systemimager/hosts</filename> files.
	</para>
	<example>
	  <title>Running addclients</title>
	  <programlisting>
[root@imageserver]# addclients
	  </programlisting>
	</example>
	
	<example>
	  <title>Entries in /etc/hosts created by addclients</title>
	  <programlisting>
192.168.1.1    server1.mydomain.com  server1
192.168.1.2    server2.mydomain.com  server2
192.168.1.3    server3.mydomain.com  server3
192.168.1.4    server4.mydomain.com  server4
192.168.1.5    server5.mydomain.com  server5
192.168.1.6    server6.mydomain.com  server6
192.168.1.7    server7.mydomain.com  server7
192.168.1.8    server8.mydomain.com  server8
192.168.1.9    server9.mydomain.com  server9
192.168.1.10    server10.mydomain.com  server10
192.168.1.11    server11.mydomain.com  server11

[ ... etc, etc, etc ... ]

192.168.1.97    server97.mydomain.com  server97
192.168.1.98    server98.mydomain.com  server98
192.168.1.99    server99.mydomain.com  server99
	  </programlisting>
	</example>
      </listitem>
      
      <listitem>
	<para>
	  Choose and configure the method for assigning IP addresses to your 
	  autoinstall clients.
	</para>
	
	<para>
	  The most common way to assign IP addresses to autoinstall clients is
	  DHCP.  To easify the configuration of the DHCP configuration file
	  (<filename>/etc/dhcpd.conf</filename>), SystemImager includes a
	  utility called <command>mkdhcpserver</command>.  
	  This utility asks you for all the information it needs 
	  to create a DHCP configuration file that 
	  is appropriate for your installation of SystemImager.  It is also
	  possible to use DHCP to assign static IP addresses to your clients on
	  an ongoing basis after installation.  If you choose to do so, simply
	  run the <command>mkdhcpstatic</command> command after all of your
	  clients have had a chance to boot and be assigned an IP address.  It
	  will modify your <filename>/etc/dhcpd.conf</filename>
	  file on the imageserver to include static entries for each of your
	  hosts.
	</para>
	
	<para>
	  Alternately, hostname, imageserver, and networking information can be
	  put in a configuration file on a floppy diskette.  Or if you are
	  using a running system's hard drive as the boot media, you can run 
	  <command>
	    updateclient -autoinstall -server &lt;imageserver&gt; -config eth0
	  </command>
	  which will create a local.cfg file at the root of the client's hard
	  drive containing the existing live network settings.
	</para>
	
	<para>
	  When the autoinstall client boots, it will look for this 
	  file and use the provided values instead of getting them from DHCP
	  and the <filename>/tftpboot/systemimager/hosts</filename> file on the
	  image server.
	  A <filename>local.cfg</filename> file on a floppy will work with any
	  of the autoinstall media.  The configuration file can even be put on
	  the autoinstall floppy itself!  If you use a
	  <filename>local.cfg</filename> file on a hard drive and on a floppy,
	  the settings on the floppy will override the settings on the hard
	  drive.
	</para>
	<example>
	  <title>Running mkdhcpserver</title>
	  <programlisting>
[root@imageserver]# mkdhcpserver
	  </programlisting>
	</example>

	<example>
	  <title>
	    Running updateclient with the "-autoinstall" and "-config" options
	  </title>
	  <para>
	    Note that the options <parameter>-autoinstall</parameter>,
	    <parameter>-server</parameter>, and
	    <parameter>-configure-from</parameter> are
	    abbreviated below as <parameter>-a</parameter>,
	    <parameter>-s</parameter>,
	    and <parameter>-c</parameter>.  It is possible to abbreviate 
	    options to minimum uniqueness with most SystemImager commands.  
	  </para>
	  
	  <para>
	    Minimum uniqueness means that if you have two options for a single 
	    command that are similar, such as the <parameter>-image</parameter>
	    and <parameter>-ip-assignment</parameter> options to
	    <command>getimage,</command> they can be abbreviated to
	    <parameter>-im</parameter> and <parameter>-ip</parameter>.
	  </para>
	  <programlisting>
[root@server7]# updateclient -a -s imageserver -c eth0
Retrieving SystemImager kernel...
Retrieving SystemImager initial ramdisk...
Adding SystemImager entry in /etc/lilo.conf...
running /sbin/lilo -d 50 -D systemimager ...
Ignoring entry 'delay'
Ignoring entry 'default'
Added linux
Added systemimager *

&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Below are the contents of your /local.cfg file.  Make sure that all
the variables are filled in and that they contain the proper values.
You may edit the file directly if you need to change any of the values.
&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#
# "SystemImager" - Copyright (C) 1999-2001 Brian Elliott Finley &lt;brian@systemimager.org>
#
# This file is: /local.cfg
#
HOSTNAME=server7
DOMAINNAME=mydomain.com
DEVICE=eth0
IPADDR=192.168.1.7
NETMASK=255.255.255.0
NETWORK=192.168.1.0
BROADCAST=192.168.1.255
GATEWAY=192.168.1.254
GATEWAYDEV=eth0
IMAGESERVER=192.168.1.203
	  </programlisting>
        </example>
      </listitem>
      
      <listitem>
	<para>
	  Autoinstall the "golden" image on other machines.
	</para>
	
	<para>
	  There are four methods for autoinstalling the clients:
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Boot the system from a floppy diskette.
	    </para>
	    
	    <para>
	      Run <command>mkautoinstalldiskette</command> to create an
	      autoinstall diskette.  Autoinstall diskettes can be used with any
	      machine unless you add a customized
	      <filename>/local.cfg</filename> file to the diskette.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Boot the system from a CDROM.
	    </para>
	    
	    <para>
	      Run <command>mkautoinstallcd</command> to create an ISO image
	      that can be burned to CDROM.  This CDROM can then be used to boot
	      your autoinstall clients and can also be used with any machine.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      Boot the system from it's own hard drive.
	    </para>
	    
	    <para>
	      If your client is already running Linux, and uses LILO as it's
	      boot loader, then you can simply copy over the
	      <command>updateclient</command> command and run it with the
	      <parameter>-autoinstall</parameter> option.
	    </para>
	    <example>
	      <title>
		Booting the autoinstall media from a system's hard drive
	      </title>
	      <programlisting>
		[root@server7]# updateclient -a -s imageserver -c eth0
	      </programlisting>
	    </example>
	  </listitem>
	  
	  <listitem>
	    <para>
	      Boot the system from the network using PXE if your system
	      supports it.  This is usually enabled through a BIOS setting.
	    </para>
	    
	    <para>
	      PXE booting can be flaky and client side firmware is less than
	      consistent.  If you must boot without physically touching
	      your machines, may I suggest that you try the
	      <parameter>-autoinstall</parameter> option to
	      <command>updateclient</command> first and see if it meets your
	      needs.
	    </para>
	    
	    <para>
              <application>SystemImager</application> comes with the
	      <command>mkbootserver</command> utility to help configure a
              PXE server.  Running <command>mkbootserver</command> is an
	      iterative process.  It will attempt to generate an appropriate
	      tftproot directory, configure your tftp server, and run various
	      tests to see if things are functioning properly.  Once
	      <command>mkbootserver</command> detects an error, it will fail
	      out with an error.  Once you have corrected this error, you can
	      re-execute mkbootserver, and repeat until it exits successfully.
	      <command>mkbootserver</command> will likely not work with all PXE
	      clients.  If it fails to work with your configuration, please
	      submit a bug report.
	    </para>
	  </listitem>
	  
	</itemizedlist>
	
      </listitem>
    </orderedlist>
  </section>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
