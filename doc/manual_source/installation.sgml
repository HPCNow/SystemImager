<chapter>
  <title>Installing SystemImager</title>
  <section>
    <title>How Does it Work?</title>
    <para>
      The <application>SystemImager</application> concept is 
      that an image server retrieves a golden client's entire system image 
      and deploys it to any number of client systems. A golden client is a 
      system you have customized to work exactly the way you want.  You can 
      re-compile the kernel, install custom software, and do any 
      configuration file tweaking you like.
      The <command>si_getimage</command> command pulls the golden image to the
      image server for deployment to other systems.
    </para>
    <para>
      Once you have deployed the initial image to your client systems,
      you can update/upgrade the client systems by syncing them to an updated
      image on the image server.  Only the modified parts of files are 
      pulled to the client for a fast, efficient, and accurate
      mass update/upgrade.
    </para>
    <note>
      <para>
	Tools other than SystemImager are available for doing automatic
	installations, such as Red Hat's <application>Kickstart</application>, 
	which installs systems based on a list of pre-defined
	packages.  However, such
	package-based installs can be very limiting because they don't
	have an automated way to deal with non-packaged files.  If you
	re-compile your kernel, add a piece of non-packaged software, or
	modify certain configuration files, package-based installation
	methods usually require you to do some sort of scripting or
	programming to deal with these "special cases."
      </para>
    </note>
  </section>
  <section>
    <title>Obtaining SystemImager</title>
    <para>
      SystemImager is currently packaged in and RPM format.
      SystemImager is a part of the Debian GNU/Linux 3.0
      distribution, starting with 3.0 (woody).  For earlier releases and
      other distributions, download packages from
      <ulink url="http://systemimager.org">http://systemimager.org/</ulink>.
    </para>
  </section>
  <section>
    <title>Selecting A Machine To Use As An Image Server</title>
    <para>
      Because SystemImager uses other network services such as DHCP, an existing
      server that provides these services often makes a good
      choice for an image server.  In addition, the image server you choose 
      needs to have enough disk space to hold the images you want to deploy.  
      SystemImager stores images as an uncompressed directory structure, so a 
      quick analysis of the disk usage on your golden client will give you a 
      good estimate of the space required on the image server.  If you plan to do 
      multiple simultaneous image updates, poor processor performance on your image
      server can cause a bottleneck.
    </para>
    <para>
      An alternative scalable and reliable method to break the bandwidth and
      performance limits of the image server is the BitTorrent transport.
      With BitTorrent the upload bandwidth of the clients can be used to
      distribute the images among the nodes exploiting the advantages of
      the peer-to-peer networks
      (for more informations see
      <ulink url="http://wiki.systemimager.org/index.php/BitTorrent">
          http://wiki.systemimager.org/index.php/BitTorrent
      </ulink>).
    </para>
  </section>
  <section>
    <title>Installing an Image Server</title>
    <para>
      To create a SystemImager image server, you must install a systemimager-&lt;ARCH&gt;boot 
	package(s) and then a systemimager-server package that supports your clients.
    </para>
	
    <para>
	The boot packages support multiple configurations.  Because different client 
	configurations require different drivers, kernel
	versions, etc., SystemImager allows you to install different boot packages, which
	are known as "boot flavors."
    </para>

    <para>Each SystemImager release provides the "standard" flavors for each
      supported	architecture.  For example, the 3.0.0 release should have these 
      packages: systemimager-boot-i386-standard_3.0.0-1_all.deb,
      systemimager-boot-ia64-standard_3.0.0-1_all.deb,
      systemimager-i386boot-standard.noarch.rpm, and
      systemimager-ia64boot-standard.noarch.rpm</para>

    <para>
	SystemImager and its standard boot flavors support most common hardware configurations.
	The <filename>.config</filename> files list the options for this kernel.
    </para>

    <para>You can use other flavors at any time to support alternate
	client configurations, and mulitple boot flavors can be installed
      simultaneously.  However, boot packages are strongly coupled to the
      version of SystemImager for which they were created.  The SystemImager
      boot package version strings should match the version
      string of the installed version of SystemImager.
    </para>

    <para>
      To create a custom flavor perfectly compatible with the distribution you
      need to install you can exploit the UYOK (Use Your Own Kernel) feature.
      
      Standard flavors use a general purpose kernel that supports a lot of hardware components,
      but obviously it can't support all the possible devices that could be present in a
      totally generic client.

      For this reason starting from 3.6.x release the UYOK (UseYourOwnKernel) was
      introduced. This feature allows you to use the same kernel that runs in your
      golden client to perform the installation in other clients. In this way it's
      possible to theoretically support all the hardware/components you could have. 

      For more informations see  
      <ulink url="http://wiki.systemimager.org/index.php/UYOK">
          http://wiki.systemimager.org/index.php/UYOK
      </ulink>.
    </para>

    <procedure>
      <title>To install an image server for Debian GNU/Linux 3.0 (woody) and later, run:</title>
      <step>
	<para><command><prompt>#</prompt> apt-get update</command></para>
      </step>
      <step>
	<para>
	  <command>
	    <prompt>#</prompt> apt-get install systemimager-server
	  </command>
	</para>
      </step>
    </procedure>
    <procedure>
      <title>For RPM based distributions:</title>
      <step>
	<para>
	  Download and install the systemimager-server RPM and required
	  dependencies from
	  <ulink url="http://systemimager.org">
	    http://systemimager.org
	  </ulink>.
	</para>
      </step>
      <step>
	<para>
	  Install each package with the <command>rpm</command> command.
	</para>
	<para>
	  <command><prompt>#</prompt> rpm -Uvh *.rpm</command>
	</para>
      </step>
      <step>
        <para>
          The rpms leave the systemimager service disabled by default, so you  
          will need to start the systemimager service in order to make
          images available to your clients via rsync.
        </para>
        <para>
          To make systemimager automatically start each time you boot your
          system, run:
        </para>
        <para>
          <command>chkconfig --add systemimager</command>
        </para>
        <para>
          You can list the set of runlevels where systemimager will be
          automatically started by running:
        </para>
        <para>
          <command>chkconfig --list systemimager</command>
        </para>
        <para>
          To start systemimager by hand, run:
        </para>
        <para>
          <command>service systemimager start</command>
        </para>
      </step>
    </procedure>
    <formalpara>
      <title>For other distributions:</title>
      <para>
	If your distribution does not support RPMs or .debs, you must
	build and install from the source tarball; binary tarball
	installations are no longer supported.  Instructions for building
	SystemImager can be found in the <filename>README</filename> file
	within the source tarball or on the wiki site
        (<ulink url="http://wiki.systemimager.org">
        http://wiki.systemimager.org
        </ulink>).
      </para>
    </formalpara>
    <formalpara>
      <title>Installing Flamethrower for multicast installations</title>
      <para>See Chapter 4, HOWTO Use Flamethrower for Multicast Installs</para>
    </formalpara>
  </section>
  <section>
    <title>Selecting A Machine To Use As A Golden Client</title>
    <para>
      A golden client must have similar hardware to the
      machines that will later use its image (i.e. the same network adapter
      chipset and the same storage adapters). You cannot currently deploy a
      SCSI-based image to an IDE based-system (or vice-versa)
      without manually editing the master script and various files
      within the image. The disk size(s) of the golden client can be smaller
      than the other machines that will use its image and larger
      within reason.
    </para>
  </section>
  <section>
    <title>Installing SystemImager Client Software on a Golden Client</title>
    <para>
      To create a golden client, you must install the	systemimager-client
      package.
    </para>
    <procedure>
      <title>For Debian GNU/Linux 3.0 (woody) and later, run:</title>
      <step>
	<para><command><prompt>#</prompt> apt-get update</command></para>
      </step>
      <step>
	<para>
	  <command>
	    <prompt>#</prompt> apt-get install systemimager-client
	  </command>
	</para>
      </step>
    </procedure>
    <procedure>
      <title>For RPM based distributions:</title>
      <step>
	<para>
	  Download and install the systemimager-client RPM and required
	  dependencies from
	  <ulink url="http://systemimager.org">
	    http://systemimager.org
	  </ulink>.
	</para>
      </step>
      <step>
	<para>
	  Install each package with the <command>rpm</command> command.
	</para>
	<para>
	  <command><prompt>#</prompt> rpm -Uvh *.rpm</command>
	</para>
      </step>
    </procedure>
    <formalpara>
      <title>For other distributions:</title>
      <para>
	If your distribution does not support RPMs or .debs, you must use
	build and install from the source tarball; binary tarball
	installations are no longer supported.  Instructions for building
	SystemImager can be found in the <filename>README</filename> file
	within the source tarball or on the wiki site
        (<ulink url="http://wiki.systemimager.org">
        http://wiki.systemimager.org
        </ulink>).
      </para>
    </formalpara>
  </section>
  <section>
    <title>Creating an Image on the Golden Client</title>
    <para>
      To create an image for deployment with the SystemImager tool, install
      and configure a Linux distribution and any additional software that you
      want the image to contain on a system you will use as your golden
      client. You will deploy the image of that system (or golden client)
      onto other machines.
    </para>
    <para>
      <application>System Installer</application>, a component of the System 
	Installation Suite to which SystemImager belongs, allows you to install 
	Linux directly to an image, bypassing the golden client step.  <application>System Installer</application> 
	packages and documentation can be found at
      <ulink url="http://systeminstaller.sourceforge.net">
	http://systeminstaller.sourceforge.net
      </ulink>
      Images created with SystemInstaller are interchangeable with those
      created using the SystemImager tools.
    </para>
  </section>
  <section>
    <title>Upgrading SystemImager</title>
    <para>
      Although SystemImager upgrades are automated in most ways, you must
	perform some upgrade processes manually to prevent losing user
      customizations.
    </para>
    <section>
      <title>Regenerating autoinstallscripts</title>
      <para>
        With each release of SystemImager, use the <command>si_mkautoinstallscript</command> 
	  command to update the autoinstall scripts stored in 
	  <filename>/var/lib/systemimager/scripts</filename>.  Installations using 
	  older scripts may fail.
      </para>
      <warning>
        <para>
          <command>si_mkautoinstallscript</command> overwrites the 
          pre-existing script for an image.  If you make any changes to 
          your autoinstall scripts (also known as .master scripts),
          backup those scripts to forward port your changes to the new
          release.
        </para>
      </warning>
      <example>
        <title>Generating new autoinstallscripts</title>
        <para>
          # si_mkautoinstallscript -image myimage -post-install reboot -ip-assignment dhcp
        </para>
        <para>
          If you require customizations to your autoinstallscript, edit the 
          appropriate .master file in <filename>/var/lib/systemimager/scripts/</filename>.
        </para>
      </example>
    </section>
    <section>
      <title>Migrating Customizations of the /etc/systemimager/rsyncd.conf file to
	SystemImager 3.0.0</title>
      <para>
        Prior to the release of SystemImager 3.0.0, your changes to 
        <filename>/etc/systemimager/rsyncd.conf</filename> could
        be made within the file, but were susceptible to upgrade issues.  With version
        3.0.0, you can make these changes in a separate file that is maintained
        across upgrades.  See the si_mkrsyncd_conf(8) man page for details.
      </para>
    </section>
    <section>
      <title>Regenerating boot media</title>
      <para>
        Each time you upgrade Systemimager, you must also upgrade the boot
	media you use to boot the autoinstall system.  Use <command>si_mkautoinstallcd</command> 
	or <command>si_mkautoinstalldisk</command> to regenerate removable media.  
      </para>
    </section>
    <section>
      <title>What happened to the binary tarballs?</title>
      <para>
        The SystemImager 3.0.0 release deprecates the binary tarball releases and
        introduces the boot packages feature, which requires that various
        components of the SystemImager system have some sort of version 
        control.  Without relying on a package management system, version
	  control requires significant effort, so SystemImager 3.0.0 does not
	  support unpackaged bits. 
      </para>
      <para>
        However, with the build system based on make, you can run commands
        like <command>make install_server_all</command>, etc., which is now the preferred
        method for installing without using a package manager, although you need to
        track down all build dependencies and runtime dependencies by hand.
      </para>
    </section>
  </section>
</chapter>
